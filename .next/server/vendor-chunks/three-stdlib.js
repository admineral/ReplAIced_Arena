"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/three-stdlib";
exports.ids = ["vendor-chunks/three-stdlib"];
exports.modules = {

/***/ "(ssr)/./node_modules/three-stdlib/lines/Line2.js":
/*!**************************************************!*\
  !*** ./node_modules/three-stdlib/lines/Line2.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Line2: () => (/* binding */ Line2)\n/* harmony export */ });\n/* harmony import */ var _LineSegments2_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./LineSegments2.js */ \"(ssr)/./node_modules/three-stdlib/lines/LineSegments2.js\");\n/* harmony import */ var _LineGeometry_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./LineGeometry.js */ \"(ssr)/./node_modules/three-stdlib/lines/LineGeometry.js\");\n/* harmony import */ var _LineMaterial_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./LineMaterial.js */ \"(ssr)/./node_modules/three-stdlib/lines/LineMaterial.js\");\n\n\n\nclass Line2 extends _LineSegments2_js__WEBPACK_IMPORTED_MODULE_0__.LineSegments2 {\n  constructor(geometry = new _LineGeometry_js__WEBPACK_IMPORTED_MODULE_1__.LineGeometry(), material = new _LineMaterial_js__WEBPACK_IMPORTED_MODULE_2__.LineMaterial({ color: Math.random() * 16777215 })) {\n    super(geometry, material);\n    this.isLine2 = true;\n    this.type = \"Line2\";\n  }\n}\n\n//# sourceMappingURL=Line2.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdGhyZWUtc3RkbGliL2xpbmVzL0xpbmUyLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBbUQ7QUFDRjtBQUNBO0FBQ2pELG9CQUFvQiw0REFBYTtBQUNqQyw2QkFBNkIsMERBQVksbUJBQW1CLDBEQUFZLEdBQUcsaUNBQWlDO0FBQzVHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHRTtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktbWF6ZS1hcHAvLi9ub2RlX21vZHVsZXMvdGhyZWUtc3RkbGliL2xpbmVzL0xpbmUyLmpzP2U4MWQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTGluZVNlZ21lbnRzMiB9IGZyb20gXCIuL0xpbmVTZWdtZW50czIuanNcIjtcbmltcG9ydCB7IExpbmVHZW9tZXRyeSB9IGZyb20gXCIuL0xpbmVHZW9tZXRyeS5qc1wiO1xuaW1wb3J0IHsgTGluZU1hdGVyaWFsIH0gZnJvbSBcIi4vTGluZU1hdGVyaWFsLmpzXCI7XG5jbGFzcyBMaW5lMiBleHRlbmRzIExpbmVTZWdtZW50czIge1xuICBjb25zdHJ1Y3RvcihnZW9tZXRyeSA9IG5ldyBMaW5lR2VvbWV0cnkoKSwgbWF0ZXJpYWwgPSBuZXcgTGluZU1hdGVyaWFsKHsgY29sb3I6IE1hdGgucmFuZG9tKCkgKiAxNjc3NzIxNSB9KSkge1xuICAgIHN1cGVyKGdlb21ldHJ5LCBtYXRlcmlhbCk7XG4gICAgdGhpcy5pc0xpbmUyID0gdHJ1ZTtcbiAgICB0aGlzLnR5cGUgPSBcIkxpbmUyXCI7XG4gIH1cbn1cbmV4cG9ydCB7XG4gIExpbmUyXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9TGluZTIuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/three-stdlib/lines/Line2.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/three-stdlib/lines/LineGeometry.js":
/*!*********************************************************!*\
  !*** ./node_modules/three-stdlib/lines/LineGeometry.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LineGeometry: () => (/* binding */ LineGeometry)\n/* harmony export */ });\n/* harmony import */ var _LineSegmentsGeometry_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./LineSegmentsGeometry.js */ \"(ssr)/./node_modules/three-stdlib/lines/LineSegmentsGeometry.js\");\n\nclass LineGeometry extends _LineSegmentsGeometry_js__WEBPACK_IMPORTED_MODULE_0__.LineSegmentsGeometry {\n  constructor() {\n    super();\n    this.isLineGeometry = true;\n    this.type = \"LineGeometry\";\n  }\n  setPositions(array) {\n    const length = array.length - 3;\n    const points = new Float32Array(2 * length);\n    for (let i = 0; i < length; i += 3) {\n      points[2 * i] = array[i];\n      points[2 * i + 1] = array[i + 1];\n      points[2 * i + 2] = array[i + 2];\n      points[2 * i + 3] = array[i + 3];\n      points[2 * i + 4] = array[i + 4];\n      points[2 * i + 5] = array[i + 5];\n    }\n    super.setPositions(points);\n    return this;\n  }\n  setColors(array, itemSize = 3) {\n    const length = array.length - itemSize;\n    const colors = new Float32Array(2 * length);\n    if (itemSize === 3) {\n      for (let i = 0; i < length; i += itemSize) {\n        colors[2 * i] = array[i];\n        colors[2 * i + 1] = array[i + 1];\n        colors[2 * i + 2] = array[i + 2];\n        colors[2 * i + 3] = array[i + 3];\n        colors[2 * i + 4] = array[i + 4];\n        colors[2 * i + 5] = array[i + 5];\n      }\n    } else {\n      for (let i = 0; i < length; i += itemSize) {\n        colors[2 * i] = array[i];\n        colors[2 * i + 1] = array[i + 1];\n        colors[2 * i + 2] = array[i + 2];\n        colors[2 * i + 3] = array[i + 3];\n        colors[2 * i + 4] = array[i + 4];\n        colors[2 * i + 5] = array[i + 5];\n        colors[2 * i + 6] = array[i + 6];\n        colors[2 * i + 7] = array[i + 7];\n      }\n    }\n    super.setColors(colors, itemSize);\n    return this;\n  }\n  fromLine(line) {\n    const geometry = line.geometry;\n    this.setPositions(geometry.attributes.position.array);\n    return this;\n  }\n}\n\n//# sourceMappingURL=LineGeometry.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdGhyZWUtc3RkbGliL2xpbmVzL0xpbmVHZW9tZXRyeS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFpRTtBQUNqRSwyQkFBMkIsMEVBQW9CO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsWUFBWTtBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLFlBQVk7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ04sc0JBQXNCLFlBQVk7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHRTtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktbWF6ZS1hcHAvLi9ub2RlX21vZHVsZXMvdGhyZWUtc3RkbGliL2xpbmVzL0xpbmVHZW9tZXRyeS5qcz81MmNkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IExpbmVTZWdtZW50c0dlb21ldHJ5IH0gZnJvbSBcIi4vTGluZVNlZ21lbnRzR2VvbWV0cnkuanNcIjtcbmNsYXNzIExpbmVHZW9tZXRyeSBleHRlbmRzIExpbmVTZWdtZW50c0dlb21ldHJ5IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLmlzTGluZUdlb21ldHJ5ID0gdHJ1ZTtcbiAgICB0aGlzLnR5cGUgPSBcIkxpbmVHZW9tZXRyeVwiO1xuICB9XG4gIHNldFBvc2l0aW9ucyhhcnJheSkge1xuICAgIGNvbnN0IGxlbmd0aCA9IGFycmF5Lmxlbmd0aCAtIDM7XG4gICAgY29uc3QgcG9pbnRzID0gbmV3IEZsb2F0MzJBcnJheSgyICogbGVuZ3RoKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSArPSAzKSB7XG4gICAgICBwb2ludHNbMiAqIGldID0gYXJyYXlbaV07XG4gICAgICBwb2ludHNbMiAqIGkgKyAxXSA9IGFycmF5W2kgKyAxXTtcbiAgICAgIHBvaW50c1syICogaSArIDJdID0gYXJyYXlbaSArIDJdO1xuICAgICAgcG9pbnRzWzIgKiBpICsgM10gPSBhcnJheVtpICsgM107XG4gICAgICBwb2ludHNbMiAqIGkgKyA0XSA9IGFycmF5W2kgKyA0XTtcbiAgICAgIHBvaW50c1syICogaSArIDVdID0gYXJyYXlbaSArIDVdO1xuICAgIH1cbiAgICBzdXBlci5zZXRQb3NpdGlvbnMocG9pbnRzKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBzZXRDb2xvcnMoYXJyYXksIGl0ZW1TaXplID0gMykge1xuICAgIGNvbnN0IGxlbmd0aCA9IGFycmF5Lmxlbmd0aCAtIGl0ZW1TaXplO1xuICAgIGNvbnN0IGNvbG9ycyA9IG5ldyBGbG9hdDMyQXJyYXkoMiAqIGxlbmd0aCk7XG4gICAgaWYgKGl0ZW1TaXplID09PSAzKSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSArPSBpdGVtU2l6ZSkge1xuICAgICAgICBjb2xvcnNbMiAqIGldID0gYXJyYXlbaV07XG4gICAgICAgIGNvbG9yc1syICogaSArIDFdID0gYXJyYXlbaSArIDFdO1xuICAgICAgICBjb2xvcnNbMiAqIGkgKyAyXSA9IGFycmF5W2kgKyAyXTtcbiAgICAgICAgY29sb3JzWzIgKiBpICsgM10gPSBhcnJheVtpICsgM107XG4gICAgICAgIGNvbG9yc1syICogaSArIDRdID0gYXJyYXlbaSArIDRdO1xuICAgICAgICBjb2xvcnNbMiAqIGkgKyA1XSA9IGFycmF5W2kgKyA1XTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKz0gaXRlbVNpemUpIHtcbiAgICAgICAgY29sb3JzWzIgKiBpXSA9IGFycmF5W2ldO1xuICAgICAgICBjb2xvcnNbMiAqIGkgKyAxXSA9IGFycmF5W2kgKyAxXTtcbiAgICAgICAgY29sb3JzWzIgKiBpICsgMl0gPSBhcnJheVtpICsgMl07XG4gICAgICAgIGNvbG9yc1syICogaSArIDNdID0gYXJyYXlbaSArIDNdO1xuICAgICAgICBjb2xvcnNbMiAqIGkgKyA0XSA9IGFycmF5W2kgKyA0XTtcbiAgICAgICAgY29sb3JzWzIgKiBpICsgNV0gPSBhcnJheVtpICsgNV07XG4gICAgICAgIGNvbG9yc1syICogaSArIDZdID0gYXJyYXlbaSArIDZdO1xuICAgICAgICBjb2xvcnNbMiAqIGkgKyA3XSA9IGFycmF5W2kgKyA3XTtcbiAgICAgIH1cbiAgICB9XG4gICAgc3VwZXIuc2V0Q29sb3JzKGNvbG9ycywgaXRlbVNpemUpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIGZyb21MaW5lKGxpbmUpIHtcbiAgICBjb25zdCBnZW9tZXRyeSA9IGxpbmUuZ2VvbWV0cnk7XG4gICAgdGhpcy5zZXRQb3NpdGlvbnMoZ2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbi5hcnJheSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbn1cbmV4cG9ydCB7XG4gIExpbmVHZW9tZXRyeVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUxpbmVHZW9tZXRyeS5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/three-stdlib/lines/LineGeometry.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/three-stdlib/lines/LineMaterial.js":
/*!*********************************************************!*\
  !*** ./node_modules/three-stdlib/lines/LineMaterial.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LineMaterial: () => (/* binding */ LineMaterial)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\n\nclass LineMaterial extends three__WEBPACK_IMPORTED_MODULE_0__.ShaderMaterial {\n  constructor(parameters) {\n    super({\n      type: \"LineMaterial\",\n      uniforms: three__WEBPACK_IMPORTED_MODULE_0__.UniformsUtils.clone(\n        three__WEBPACK_IMPORTED_MODULE_0__.UniformsUtils.merge([\n          three__WEBPACK_IMPORTED_MODULE_0__.UniformsLib.common,\n          three__WEBPACK_IMPORTED_MODULE_0__.UniformsLib.fog,\n          {\n            worldUnits: { value: 1 },\n            linewidth: { value: 1 },\n            resolution: { value: new three__WEBPACK_IMPORTED_MODULE_0__.Vector2(1, 1) },\n            dashOffset: { value: 0 },\n            dashScale: { value: 1 },\n            dashSize: { value: 1 },\n            gapSize: { value: 1 }\n            // todo FIX - maybe change to totalSize\n          }\n        ])\n      ),\n      vertexShader: (\n        /* glsl */\n        `\n\t\t\t\t#include <common>\n\t\t\t\t#include <fog_pars_vertex>\n\t\t\t\t#include <logdepthbuf_pars_vertex>\n\t\t\t\t#include <clipping_planes_pars_vertex>\n\n\t\t\t\tuniform float linewidth;\n\t\t\t\tuniform vec2 resolution;\n\n\t\t\t\tattribute vec3 instanceStart;\n\t\t\t\tattribute vec3 instanceEnd;\n\n\t\t\t\t#ifdef USE_COLOR\n\t\t\t\t\t#ifdef USE_LINE_COLOR_ALPHA\n\t\t\t\t\t\tvarying vec4 vLineColor;\n\t\t\t\t\t\tattribute vec4 instanceColorStart;\n\t\t\t\t\t\tattribute vec4 instanceColorEnd;\n\t\t\t\t\t#else\n\t\t\t\t\t\tvarying vec3 vLineColor;\n\t\t\t\t\t\tattribute vec3 instanceColorStart;\n\t\t\t\t\t\tattribute vec3 instanceColorEnd;\n\t\t\t\t\t#endif\n\t\t\t\t#endif\n\n\t\t\t\t#ifdef WORLD_UNITS\n\n\t\t\t\t\tvarying vec4 worldPos;\n\t\t\t\t\tvarying vec3 worldStart;\n\t\t\t\t\tvarying vec3 worldEnd;\n\n\t\t\t\t\t#ifdef USE_DASH\n\n\t\t\t\t\t\tvarying vec2 vUv;\n\n\t\t\t\t\t#endif\n\n\t\t\t\t#else\n\n\t\t\t\t\tvarying vec2 vUv;\n\n\t\t\t\t#endif\n\n\t\t\t\t#ifdef USE_DASH\n\n\t\t\t\t\tuniform float dashScale;\n\t\t\t\t\tattribute float instanceDistanceStart;\n\t\t\t\t\tattribute float instanceDistanceEnd;\n\t\t\t\t\tvarying float vLineDistance;\n\n\t\t\t\t#endif\n\n\t\t\t\tvoid trimSegment( const in vec4 start, inout vec4 end ) {\n\n\t\t\t\t\t// trim end segment so it terminates between the camera plane and the near plane\n\n\t\t\t\t\t// conservative estimate of the near plane\n\t\t\t\t\tfloat a = projectionMatrix[ 2 ][ 2 ]; // 3nd entry in 3th column\n\t\t\t\t\tfloat b = projectionMatrix[ 3 ][ 2 ]; // 3nd entry in 4th column\n\t\t\t\t\tfloat nearEstimate = - 0.5 * b / a;\n\n\t\t\t\t\tfloat alpha = ( nearEstimate - start.z ) / ( end.z - start.z );\n\n\t\t\t\t\tend.xyz = mix( start.xyz, end.xyz, alpha );\n\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\t#ifdef USE_COLOR\n\n\t\t\t\t\t\tvLineColor = ( position.y < 0.5 ) ? instanceColorStart : instanceColorEnd;\n\n\t\t\t\t\t#endif\n\n\t\t\t\t\t#ifdef USE_DASH\n\n\t\t\t\t\t\tvLineDistance = ( position.y < 0.5 ) ? dashScale * instanceDistanceStart : dashScale * instanceDistanceEnd;\n\t\t\t\t\t\tvUv = uv;\n\n\t\t\t\t\t#endif\n\n\t\t\t\t\tfloat aspect = resolution.x / resolution.y;\n\n\t\t\t\t\t// camera space\n\t\t\t\t\tvec4 start = modelViewMatrix * vec4( instanceStart, 1.0 );\n\t\t\t\t\tvec4 end = modelViewMatrix * vec4( instanceEnd, 1.0 );\n\n\t\t\t\t\t#ifdef WORLD_UNITS\n\n\t\t\t\t\t\tworldStart = start.xyz;\n\t\t\t\t\t\tworldEnd = end.xyz;\n\n\t\t\t\t\t#else\n\n\t\t\t\t\t\tvUv = uv;\n\n\t\t\t\t\t#endif\n\n\t\t\t\t\t// special case for perspective projection, and segments that terminate either in, or behind, the camera plane\n\t\t\t\t\t// clearly the gpu firmware has a way of addressing this issue when projecting into ndc space\n\t\t\t\t\t// but we need to perform ndc-space calculations in the shader, so we must address this issue directly\n\t\t\t\t\t// perhaps there is a more elegant solution -- WestLangley\n\n\t\t\t\t\tbool perspective = ( projectionMatrix[ 2 ][ 3 ] == - 1.0 ); // 4th entry in the 3rd column\n\n\t\t\t\t\tif ( perspective ) {\n\n\t\t\t\t\t\tif ( start.z < 0.0 && end.z >= 0.0 ) {\n\n\t\t\t\t\t\t\ttrimSegment( start, end );\n\n\t\t\t\t\t\t} else if ( end.z < 0.0 && start.z >= 0.0 ) {\n\n\t\t\t\t\t\t\ttrimSegment( end, start );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// clip space\n\t\t\t\t\tvec4 clipStart = projectionMatrix * start;\n\t\t\t\t\tvec4 clipEnd = projectionMatrix * end;\n\n\t\t\t\t\t// ndc space\n\t\t\t\t\tvec3 ndcStart = clipStart.xyz / clipStart.w;\n\t\t\t\t\tvec3 ndcEnd = clipEnd.xyz / clipEnd.w;\n\n\t\t\t\t\t// direction\n\t\t\t\t\tvec2 dir = ndcEnd.xy - ndcStart.xy;\n\n\t\t\t\t\t// account for clip-space aspect ratio\n\t\t\t\t\tdir.x *= aspect;\n\t\t\t\t\tdir = normalize( dir );\n\n\t\t\t\t\t#ifdef WORLD_UNITS\n\n\t\t\t\t\t\t// get the offset direction as perpendicular to the view vector\n\t\t\t\t\t\tvec3 worldDir = normalize( end.xyz - start.xyz );\n\t\t\t\t\t\tvec3 offset;\n\t\t\t\t\t\tif ( position.y < 0.5 ) {\n\n\t\t\t\t\t\t\toffset = normalize( cross( start.xyz, worldDir ) );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\toffset = normalize( cross( end.xyz, worldDir ) );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// sign flip\n\t\t\t\t\t\tif ( position.x < 0.0 ) offset *= - 1.0;\n\n\t\t\t\t\t\tfloat forwardOffset = dot( worldDir, vec3( 0.0, 0.0, 1.0 ) );\n\n\t\t\t\t\t\t// don't extend the line if we're rendering dashes because we\n\t\t\t\t\t\t// won't be rendering the endcaps\n\t\t\t\t\t\t#ifndef USE_DASH\n\n\t\t\t\t\t\t\t// extend the line bounds to encompass  endcaps\n\t\t\t\t\t\t\tstart.xyz += - worldDir * linewidth * 0.5;\n\t\t\t\t\t\t\tend.xyz += worldDir * linewidth * 0.5;\n\n\t\t\t\t\t\t\t// shift the position of the quad so it hugs the forward edge of the line\n\t\t\t\t\t\t\toffset.xy -= dir * forwardOffset;\n\t\t\t\t\t\t\toffset.z += 0.5;\n\n\t\t\t\t\t\t#endif\n\n\t\t\t\t\t\t// endcaps\n\t\t\t\t\t\tif ( position.y > 1.0 || position.y < 0.0 ) {\n\n\t\t\t\t\t\t\toffset.xy += dir * 2.0 * forwardOffset;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// adjust for linewidth\n\t\t\t\t\t\toffset *= linewidth * 0.5;\n\n\t\t\t\t\t\t// set the world position\n\t\t\t\t\t\tworldPos = ( position.y < 0.5 ) ? start : end;\n\t\t\t\t\t\tworldPos.xyz += offset;\n\n\t\t\t\t\t\t// project the worldpos\n\t\t\t\t\t\tvec4 clip = projectionMatrix * worldPos;\n\n\t\t\t\t\t\t// shift the depth of the projected points so the line\n\t\t\t\t\t\t// segments overlap neatly\n\t\t\t\t\t\tvec3 clipPose = ( position.y < 0.5 ) ? ndcStart : ndcEnd;\n\t\t\t\t\t\tclip.z = clipPose.z * clip.w;\n\n\t\t\t\t\t#else\n\n\t\t\t\t\t\tvec2 offset = vec2( dir.y, - dir.x );\n\t\t\t\t\t\t// undo aspect ratio adjustment\n\t\t\t\t\t\tdir.x /= aspect;\n\t\t\t\t\t\toffset.x /= aspect;\n\n\t\t\t\t\t\t// sign flip\n\t\t\t\t\t\tif ( position.x < 0.0 ) offset *= - 1.0;\n\n\t\t\t\t\t\t// endcaps\n\t\t\t\t\t\tif ( position.y < 0.0 ) {\n\n\t\t\t\t\t\t\toffset += - dir;\n\n\t\t\t\t\t\t} else if ( position.y > 1.0 ) {\n\n\t\t\t\t\t\t\toffset += dir;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// adjust for linewidth\n\t\t\t\t\t\toffset *= linewidth;\n\n\t\t\t\t\t\t// adjust for clip-space to screen-space conversion // maybe resolution should be based on viewport ...\n\t\t\t\t\t\toffset /= resolution.y;\n\n\t\t\t\t\t\t// select end\n\t\t\t\t\t\tvec4 clip = ( position.y < 0.5 ) ? clipStart : clipEnd;\n\n\t\t\t\t\t\t// back to clip space\n\t\t\t\t\t\toffset *= clip.w;\n\n\t\t\t\t\t\tclip.xy += offset;\n\n\t\t\t\t\t#endif\n\n\t\t\t\t\tgl_Position = clip;\n\n\t\t\t\t\tvec4 mvPosition = ( position.y < 0.5 ) ? start : end; // this is an approximation\n\n\t\t\t\t\t#include <logdepthbuf_vertex>\n\t\t\t\t\t#include <clipping_planes_vertex>\n\t\t\t\t\t#include <fog_vertex>\n\n\t\t\t\t}\n\t\t\t`\n      ),\n      fragmentShader: (\n        /* glsl */\n        `\n\t\t\t\tuniform vec3 diffuse;\n\t\t\t\tuniform float opacity;\n\t\t\t\tuniform float linewidth;\n\n\t\t\t\t#ifdef USE_DASH\n\n\t\t\t\t\tuniform float dashOffset;\n\t\t\t\t\tuniform float dashSize;\n\t\t\t\t\tuniform float gapSize;\n\n\t\t\t\t#endif\n\n\t\t\t\tvarying float vLineDistance;\n\n\t\t\t\t#ifdef WORLD_UNITS\n\n\t\t\t\t\tvarying vec4 worldPos;\n\t\t\t\t\tvarying vec3 worldStart;\n\t\t\t\t\tvarying vec3 worldEnd;\n\n\t\t\t\t\t#ifdef USE_DASH\n\n\t\t\t\t\t\tvarying vec2 vUv;\n\n\t\t\t\t\t#endif\n\n\t\t\t\t#else\n\n\t\t\t\t\tvarying vec2 vUv;\n\n\t\t\t\t#endif\n\n\t\t\t\t#include <common>\n\t\t\t\t#include <fog_pars_fragment>\n\t\t\t\t#include <logdepthbuf_pars_fragment>\n\t\t\t\t#include <clipping_planes_pars_fragment>\n\n\t\t\t\t#ifdef USE_COLOR\n\t\t\t\t\t#ifdef USE_LINE_COLOR_ALPHA\n\t\t\t\t\t\tvarying vec4 vLineColor;\n\t\t\t\t\t#else\n\t\t\t\t\t\tvarying vec3 vLineColor;\n\t\t\t\t\t#endif\n\t\t\t\t#endif\n\n\t\t\t\tvec2 closestLineToLine(vec3 p1, vec3 p2, vec3 p3, vec3 p4) {\n\n\t\t\t\t\tfloat mua;\n\t\t\t\t\tfloat mub;\n\n\t\t\t\t\tvec3 p13 = p1 - p3;\n\t\t\t\t\tvec3 p43 = p4 - p3;\n\n\t\t\t\t\tvec3 p21 = p2 - p1;\n\n\t\t\t\t\tfloat d1343 = dot( p13, p43 );\n\t\t\t\t\tfloat d4321 = dot( p43, p21 );\n\t\t\t\t\tfloat d1321 = dot( p13, p21 );\n\t\t\t\t\tfloat d4343 = dot( p43, p43 );\n\t\t\t\t\tfloat d2121 = dot( p21, p21 );\n\n\t\t\t\t\tfloat denom = d2121 * d4343 - d4321 * d4321;\n\n\t\t\t\t\tfloat numer = d1343 * d4321 - d1321 * d4343;\n\n\t\t\t\t\tmua = numer / denom;\n\t\t\t\t\tmua = clamp( mua, 0.0, 1.0 );\n\t\t\t\t\tmub = ( d1343 + d4321 * ( mua ) ) / d4343;\n\t\t\t\t\tmub = clamp( mub, 0.0, 1.0 );\n\n\t\t\t\t\treturn vec2( mua, mub );\n\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\t#include <clipping_planes_fragment>\n\n\t\t\t\t\t#ifdef USE_DASH\n\n\t\t\t\t\t\tif ( vUv.y < - 1.0 || vUv.y > 1.0 ) discard; // discard endcaps\n\n\t\t\t\t\t\tif ( mod( vLineDistance + dashOffset, dashSize + gapSize ) > dashSize ) discard; // todo - FIX\n\n\t\t\t\t\t#endif\n\n\t\t\t\t\tfloat alpha = opacity;\n\n\t\t\t\t\t#ifdef WORLD_UNITS\n\n\t\t\t\t\t\t// Find the closest points on the view ray and the line segment\n\t\t\t\t\t\tvec3 rayEnd = normalize( worldPos.xyz ) * 1e5;\n\t\t\t\t\t\tvec3 lineDir = worldEnd - worldStart;\n\t\t\t\t\t\tvec2 params = closestLineToLine( worldStart, worldEnd, vec3( 0.0, 0.0, 0.0 ), rayEnd );\n\n\t\t\t\t\t\tvec3 p1 = worldStart + lineDir * params.x;\n\t\t\t\t\t\tvec3 p2 = rayEnd * params.y;\n\t\t\t\t\t\tvec3 delta = p1 - p2;\n\t\t\t\t\t\tfloat len = length( delta );\n\t\t\t\t\t\tfloat norm = len / linewidth;\n\n\t\t\t\t\t\t#ifndef USE_DASH\n\n\t\t\t\t\t\t\t#ifdef USE_ALPHA_TO_COVERAGE\n\n\t\t\t\t\t\t\t\tfloat dnorm = fwidth( norm );\n\t\t\t\t\t\t\t\talpha = 1.0 - smoothstep( 0.5 - dnorm, 0.5 + dnorm, norm );\n\n\t\t\t\t\t\t\t#else\n\n\t\t\t\t\t\t\t\tif ( norm > 0.5 ) {\n\n\t\t\t\t\t\t\t\t\tdiscard;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t#endif\n\n\t\t\t\t\t\t#endif\n\n\t\t\t\t\t#else\n\n\t\t\t\t\t\t#ifdef USE_ALPHA_TO_COVERAGE\n\n\t\t\t\t\t\t\t// artifacts appear on some hardware if a derivative is taken within a conditional\n\t\t\t\t\t\t\tfloat a = vUv.x;\n\t\t\t\t\t\t\tfloat b = ( vUv.y > 0.0 ) ? vUv.y - 1.0 : vUv.y + 1.0;\n\t\t\t\t\t\t\tfloat len2 = a * a + b * b;\n\t\t\t\t\t\t\tfloat dlen = fwidth( len2 );\n\n\t\t\t\t\t\t\tif ( abs( vUv.y ) > 1.0 ) {\n\n\t\t\t\t\t\t\t\talpha = 1.0 - smoothstep( 1.0 - dlen, 1.0 + dlen, len2 );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t#else\n\n\t\t\t\t\t\t\tif ( abs( vUv.y ) > 1.0 ) {\n\n\t\t\t\t\t\t\t\tfloat a = vUv.x;\n\t\t\t\t\t\t\t\tfloat b = ( vUv.y > 0.0 ) ? vUv.y - 1.0 : vUv.y + 1.0;\n\t\t\t\t\t\t\t\tfloat len2 = a * a + b * b;\n\n\t\t\t\t\t\t\t\tif ( len2 > 1.0 ) discard;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t#endif\n\n\t\t\t\t\t#endif\n\n\t\t\t\t\tvec4 diffuseColor = vec4( diffuse, alpha );\n\t\t\t\t\t#ifdef USE_COLOR\n\t\t\t\t\t\t#ifdef USE_LINE_COLOR_ALPHA\n\t\t\t\t\t\t\tdiffuseColor *= vLineColor;\n\t\t\t\t\t\t#else\n\t\t\t\t\t\t\tdiffuseColor.rgb *= vLineColor;\n\t\t\t\t\t\t#endif\n\t\t\t\t\t#endif\n\n\t\t\t\t\t#include <logdepthbuf_fragment>\n\n\t\t\t\t\tgl_FragColor = diffuseColor;\n\n\t\t\t\t\t#include <tonemapping_fragment>\n\t\t\t\t\t#include <${parseInt(three__WEBPACK_IMPORTED_MODULE_0__.REVISION.replace(/\\D+/g, \"\")) >= 154 ? \"colorspace_fragment\" : \"encodings_fragment\"}>\n\t\t\t\t\t#include <fog_fragment>\n\t\t\t\t\t#include <premultiplied_alpha_fragment>\n\n\t\t\t\t}\n\t\t\t`\n      ),\n      clipping: true\n      // required for clipping support\n    });\n    this.isLineMaterial = true;\n    this.onBeforeCompile = function() {\n      if (this.transparent) {\n        this.defines.USE_LINE_COLOR_ALPHA = \"1\";\n      } else {\n        delete this.defines.USE_LINE_COLOR_ALPHA;\n      }\n    };\n    Object.defineProperties(this, {\n      color: {\n        enumerable: true,\n        get: function() {\n          return this.uniforms.diffuse.value;\n        },\n        set: function(value) {\n          this.uniforms.diffuse.value = value;\n        }\n      },\n      worldUnits: {\n        enumerable: true,\n        get: function() {\n          return \"WORLD_UNITS\" in this.defines;\n        },\n        set: function(value) {\n          if (value === true) {\n            this.defines.WORLD_UNITS = \"\";\n          } else {\n            delete this.defines.WORLD_UNITS;\n          }\n        }\n      },\n      linewidth: {\n        enumerable: true,\n        get: function() {\n          return this.uniforms.linewidth.value;\n        },\n        set: function(value) {\n          this.uniforms.linewidth.value = value;\n        }\n      },\n      dashed: {\n        enumerable: true,\n        get: function() {\n          return Boolean(\"USE_DASH\" in this.defines);\n        },\n        set(value) {\n          if (Boolean(value) !== Boolean(\"USE_DASH\" in this.defines)) {\n            this.needsUpdate = true;\n          }\n          if (value === true) {\n            this.defines.USE_DASH = \"\";\n          } else {\n            delete this.defines.USE_DASH;\n          }\n        }\n      },\n      dashScale: {\n        enumerable: true,\n        get: function() {\n          return this.uniforms.dashScale.value;\n        },\n        set: function(value) {\n          this.uniforms.dashScale.value = value;\n        }\n      },\n      dashSize: {\n        enumerable: true,\n        get: function() {\n          return this.uniforms.dashSize.value;\n        },\n        set: function(value) {\n          this.uniforms.dashSize.value = value;\n        }\n      },\n      dashOffset: {\n        enumerable: true,\n        get: function() {\n          return this.uniforms.dashOffset.value;\n        },\n        set: function(value) {\n          this.uniforms.dashOffset.value = value;\n        }\n      },\n      gapSize: {\n        enumerable: true,\n        get: function() {\n          return this.uniforms.gapSize.value;\n        },\n        set: function(value) {\n          this.uniforms.gapSize.value = value;\n        }\n      },\n      opacity: {\n        enumerable: true,\n        get: function() {\n          return this.uniforms.opacity.value;\n        },\n        set: function(value) {\n          this.uniforms.opacity.value = value;\n        }\n      },\n      resolution: {\n        enumerable: true,\n        get: function() {\n          return this.uniforms.resolution.value;\n        },\n        set: function(value) {\n          this.uniforms.resolution.value.copy(value);\n        }\n      },\n      alphaToCoverage: {\n        enumerable: true,\n        get: function() {\n          return Boolean(\"USE_ALPHA_TO_COVERAGE\" in this.defines);\n        },\n        set: function(value) {\n          if (Boolean(value) !== Boolean(\"USE_ALPHA_TO_COVERAGE\" in this.defines)) {\n            this.needsUpdate = true;\n          }\n          if (value === true) {\n            this.defines.USE_ALPHA_TO_COVERAGE = \"\";\n            this.extensions.derivatives = true;\n          } else {\n            delete this.defines.USE_ALPHA_TO_COVERAGE;\n            this.extensions.derivatives = false;\n          }\n        }\n      }\n    });\n    this.setValues(parameters);\n  }\n}\n\n//# sourceMappingURL=LineMaterial.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdGhyZWUtc3RkbGliL2xpbmVzL0xpbmVNYXRlcmlhbC5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFzRjtBQUN0RiwyQkFBMkIsaURBQWM7QUFDekM7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLGdEQUFhO0FBQzdCLFFBQVEsZ0RBQWE7QUFDckIsVUFBVSw4Q0FBVztBQUNyQixVQUFVLDhDQUFXO0FBQ3JCO0FBQ0EsMEJBQTBCLFVBQVU7QUFDcEMseUJBQXlCLFVBQVU7QUFDbkMsMEJBQTBCLFdBQVcsMENBQU8sUUFBUTtBQUNwRCwwQkFBMEIsVUFBVTtBQUNwQyx5QkFBeUIsVUFBVTtBQUNuQyx3QkFBd0IsVUFBVTtBQUNsQyx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQSwyQ0FBMkM7QUFDM0MsMkNBQTJDO0FBQzNDOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsaUVBQWlFOztBQUVqRTs7QUFFQTs7QUFFQTs7QUFFQSxRQUFROztBQUVSOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsUUFBUTs7QUFFUjs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUEsUUFBUTs7QUFFUjs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBLDJEQUEyRDs7QUFFM0Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBLG1EQUFtRDs7QUFFbkQsdUZBQXVGOztBQUV2Rjs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBLGlCQUFpQixTQUFTLDJDQUFRLDRFQUE0RTtBQUM5RztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUdFO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS1tYXplLWFwcC8uL25vZGVfbW9kdWxlcy90aHJlZS1zdGRsaWIvbGluZXMvTGluZU1hdGVyaWFsLmpzPzllY2MiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU2hhZGVyTWF0ZXJpYWwsIFVuaWZvcm1zVXRpbHMsIFVuaWZvcm1zTGliLCBWZWN0b3IyLCBSRVZJU0lPTiB9IGZyb20gXCJ0aHJlZVwiO1xuY2xhc3MgTGluZU1hdGVyaWFsIGV4dGVuZHMgU2hhZGVyTWF0ZXJpYWwge1xuICBjb25zdHJ1Y3RvcihwYXJhbWV0ZXJzKSB7XG4gICAgc3VwZXIoe1xuICAgICAgdHlwZTogXCJMaW5lTWF0ZXJpYWxcIixcbiAgICAgIHVuaWZvcm1zOiBVbmlmb3Jtc1V0aWxzLmNsb25lKFxuICAgICAgICBVbmlmb3Jtc1V0aWxzLm1lcmdlKFtcbiAgICAgICAgICBVbmlmb3Jtc0xpYi5jb21tb24sXG4gICAgICAgICAgVW5pZm9ybXNMaWIuZm9nLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHdvcmxkVW5pdHM6IHsgdmFsdWU6IDEgfSxcbiAgICAgICAgICAgIGxpbmV3aWR0aDogeyB2YWx1ZTogMSB9LFxuICAgICAgICAgICAgcmVzb2x1dGlvbjogeyB2YWx1ZTogbmV3IFZlY3RvcjIoMSwgMSkgfSxcbiAgICAgICAgICAgIGRhc2hPZmZzZXQ6IHsgdmFsdWU6IDAgfSxcbiAgICAgICAgICAgIGRhc2hTY2FsZTogeyB2YWx1ZTogMSB9LFxuICAgICAgICAgICAgZGFzaFNpemU6IHsgdmFsdWU6IDEgfSxcbiAgICAgICAgICAgIGdhcFNpemU6IHsgdmFsdWU6IDEgfVxuICAgICAgICAgICAgLy8gdG9kbyBGSVggLSBtYXliZSBjaGFuZ2UgdG8gdG90YWxTaXplXG4gICAgICAgICAgfVxuICAgICAgICBdKVxuICAgICAgKSxcbiAgICAgIHZlcnRleFNoYWRlcjogKFxuICAgICAgICAvKiBnbHNsICovXG4gICAgICAgIGBcblx0XHRcdFx0I2luY2x1ZGUgPGNvbW1vbj5cblx0XHRcdFx0I2luY2x1ZGUgPGZvZ19wYXJzX3ZlcnRleD5cblx0XHRcdFx0I2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfdmVydGV4PlxuXHRcdFx0XHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfdmVydGV4PlxuXG5cdFx0XHRcdHVuaWZvcm0gZmxvYXQgbGluZXdpZHRoO1xuXHRcdFx0XHR1bmlmb3JtIHZlYzIgcmVzb2x1dGlvbjtcblxuXHRcdFx0XHRhdHRyaWJ1dGUgdmVjMyBpbnN0YW5jZVN0YXJ0O1xuXHRcdFx0XHRhdHRyaWJ1dGUgdmVjMyBpbnN0YW5jZUVuZDtcblxuXHRcdFx0XHQjaWZkZWYgVVNFX0NPTE9SXG5cdFx0XHRcdFx0I2lmZGVmIFVTRV9MSU5FX0NPTE9SX0FMUEhBXG5cdFx0XHRcdFx0XHR2YXJ5aW5nIHZlYzQgdkxpbmVDb2xvcjtcblx0XHRcdFx0XHRcdGF0dHJpYnV0ZSB2ZWM0IGluc3RhbmNlQ29sb3JTdGFydDtcblx0XHRcdFx0XHRcdGF0dHJpYnV0ZSB2ZWM0IGluc3RhbmNlQ29sb3JFbmQ7XG5cdFx0XHRcdFx0I2Vsc2Vcblx0XHRcdFx0XHRcdHZhcnlpbmcgdmVjMyB2TGluZUNvbG9yO1xuXHRcdFx0XHRcdFx0YXR0cmlidXRlIHZlYzMgaW5zdGFuY2VDb2xvclN0YXJ0O1xuXHRcdFx0XHRcdFx0YXR0cmlidXRlIHZlYzMgaW5zdGFuY2VDb2xvckVuZDtcblx0XHRcdFx0XHQjZW5kaWZcblx0XHRcdFx0I2VuZGlmXG5cblx0XHRcdFx0I2lmZGVmIFdPUkxEX1VOSVRTXG5cblx0XHRcdFx0XHR2YXJ5aW5nIHZlYzQgd29ybGRQb3M7XG5cdFx0XHRcdFx0dmFyeWluZyB2ZWMzIHdvcmxkU3RhcnQ7XG5cdFx0XHRcdFx0dmFyeWluZyB2ZWMzIHdvcmxkRW5kO1xuXG5cdFx0XHRcdFx0I2lmZGVmIFVTRV9EQVNIXG5cblx0XHRcdFx0XHRcdHZhcnlpbmcgdmVjMiB2VXY7XG5cblx0XHRcdFx0XHQjZW5kaWZcblxuXHRcdFx0XHQjZWxzZVxuXG5cdFx0XHRcdFx0dmFyeWluZyB2ZWMyIHZVdjtcblxuXHRcdFx0XHQjZW5kaWZcblxuXHRcdFx0XHQjaWZkZWYgVVNFX0RBU0hcblxuXHRcdFx0XHRcdHVuaWZvcm0gZmxvYXQgZGFzaFNjYWxlO1xuXHRcdFx0XHRcdGF0dHJpYnV0ZSBmbG9hdCBpbnN0YW5jZURpc3RhbmNlU3RhcnQ7XG5cdFx0XHRcdFx0YXR0cmlidXRlIGZsb2F0IGluc3RhbmNlRGlzdGFuY2VFbmQ7XG5cdFx0XHRcdFx0dmFyeWluZyBmbG9hdCB2TGluZURpc3RhbmNlO1xuXG5cdFx0XHRcdCNlbmRpZlxuXG5cdFx0XHRcdHZvaWQgdHJpbVNlZ21lbnQoIGNvbnN0IGluIHZlYzQgc3RhcnQsIGlub3V0IHZlYzQgZW5kICkge1xuXG5cdFx0XHRcdFx0Ly8gdHJpbSBlbmQgc2VnbWVudCBzbyBpdCB0ZXJtaW5hdGVzIGJldHdlZW4gdGhlIGNhbWVyYSBwbGFuZSBhbmQgdGhlIG5lYXIgcGxhbmVcblxuXHRcdFx0XHRcdC8vIGNvbnNlcnZhdGl2ZSBlc3RpbWF0ZSBvZiB0aGUgbmVhciBwbGFuZVxuXHRcdFx0XHRcdGZsb2F0IGEgPSBwcm9qZWN0aW9uTWF0cml4WyAyIF1bIDIgXTsgLy8gM25kIGVudHJ5IGluIDN0aCBjb2x1bW5cblx0XHRcdFx0XHRmbG9hdCBiID0gcHJvamVjdGlvbk1hdHJpeFsgMyBdWyAyIF07IC8vIDNuZCBlbnRyeSBpbiA0dGggY29sdW1uXG5cdFx0XHRcdFx0ZmxvYXQgbmVhckVzdGltYXRlID0gLSAwLjUgKiBiIC8gYTtcblxuXHRcdFx0XHRcdGZsb2F0IGFscGhhID0gKCBuZWFyRXN0aW1hdGUgLSBzdGFydC56ICkgLyAoIGVuZC56IC0gc3RhcnQueiApO1xuXG5cdFx0XHRcdFx0ZW5kLnh5eiA9IG1peCggc3RhcnQueHl6LCBlbmQueHl6LCBhbHBoYSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHR2b2lkIG1haW4oKSB7XG5cblx0XHRcdFx0XHQjaWZkZWYgVVNFX0NPTE9SXG5cblx0XHRcdFx0XHRcdHZMaW5lQ29sb3IgPSAoIHBvc2l0aW9uLnkgPCAwLjUgKSA/IGluc3RhbmNlQ29sb3JTdGFydCA6IGluc3RhbmNlQ29sb3JFbmQ7XG5cblx0XHRcdFx0XHQjZW5kaWZcblxuXHRcdFx0XHRcdCNpZmRlZiBVU0VfREFTSFxuXG5cdFx0XHRcdFx0XHR2TGluZURpc3RhbmNlID0gKCBwb3NpdGlvbi55IDwgMC41ICkgPyBkYXNoU2NhbGUgKiBpbnN0YW5jZURpc3RhbmNlU3RhcnQgOiBkYXNoU2NhbGUgKiBpbnN0YW5jZURpc3RhbmNlRW5kO1xuXHRcdFx0XHRcdFx0dlV2ID0gdXY7XG5cblx0XHRcdFx0XHQjZW5kaWZcblxuXHRcdFx0XHRcdGZsb2F0IGFzcGVjdCA9IHJlc29sdXRpb24ueCAvIHJlc29sdXRpb24ueTtcblxuXHRcdFx0XHRcdC8vIGNhbWVyYSBzcGFjZVxuXHRcdFx0XHRcdHZlYzQgc3RhcnQgPSBtb2RlbFZpZXdNYXRyaXggKiB2ZWM0KCBpbnN0YW5jZVN0YXJ0LCAxLjAgKTtcblx0XHRcdFx0XHR2ZWM0IGVuZCA9IG1vZGVsVmlld01hdHJpeCAqIHZlYzQoIGluc3RhbmNlRW5kLCAxLjAgKTtcblxuXHRcdFx0XHRcdCNpZmRlZiBXT1JMRF9VTklUU1xuXG5cdFx0XHRcdFx0XHR3b3JsZFN0YXJ0ID0gc3RhcnQueHl6O1xuXHRcdFx0XHRcdFx0d29ybGRFbmQgPSBlbmQueHl6O1xuXG5cdFx0XHRcdFx0I2Vsc2VcblxuXHRcdFx0XHRcdFx0dlV2ID0gdXY7XG5cblx0XHRcdFx0XHQjZW5kaWZcblxuXHRcdFx0XHRcdC8vIHNwZWNpYWwgY2FzZSBmb3IgcGVyc3BlY3RpdmUgcHJvamVjdGlvbiwgYW5kIHNlZ21lbnRzIHRoYXQgdGVybWluYXRlIGVpdGhlciBpbiwgb3IgYmVoaW5kLCB0aGUgY2FtZXJhIHBsYW5lXG5cdFx0XHRcdFx0Ly8gY2xlYXJseSB0aGUgZ3B1IGZpcm13YXJlIGhhcyBhIHdheSBvZiBhZGRyZXNzaW5nIHRoaXMgaXNzdWUgd2hlbiBwcm9qZWN0aW5nIGludG8gbmRjIHNwYWNlXG5cdFx0XHRcdFx0Ly8gYnV0IHdlIG5lZWQgdG8gcGVyZm9ybSBuZGMtc3BhY2UgY2FsY3VsYXRpb25zIGluIHRoZSBzaGFkZXIsIHNvIHdlIG11c3QgYWRkcmVzcyB0aGlzIGlzc3VlIGRpcmVjdGx5XG5cdFx0XHRcdFx0Ly8gcGVyaGFwcyB0aGVyZSBpcyBhIG1vcmUgZWxlZ2FudCBzb2x1dGlvbiAtLSBXZXN0TGFuZ2xleVxuXG5cdFx0XHRcdFx0Ym9vbCBwZXJzcGVjdGl2ZSA9ICggcHJvamVjdGlvbk1hdHJpeFsgMiBdWyAzIF0gPT0gLSAxLjAgKTsgLy8gNHRoIGVudHJ5IGluIHRoZSAzcmQgY29sdW1uXG5cblx0XHRcdFx0XHRpZiAoIHBlcnNwZWN0aXZlICkge1xuXG5cdFx0XHRcdFx0XHRpZiAoIHN0YXJ0LnogPCAwLjAgJiYgZW5kLnogPj0gMC4wICkge1xuXG5cdFx0XHRcdFx0XHRcdHRyaW1TZWdtZW50KCBzdGFydCwgZW5kICk7XG5cblx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIGVuZC56IDwgMC4wICYmIHN0YXJ0LnogPj0gMC4wICkge1xuXG5cdFx0XHRcdFx0XHRcdHRyaW1TZWdtZW50KCBlbmQsIHN0YXJ0ICk7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIGNsaXAgc3BhY2Vcblx0XHRcdFx0XHR2ZWM0IGNsaXBTdGFydCA9IHByb2plY3Rpb25NYXRyaXggKiBzdGFydDtcblx0XHRcdFx0XHR2ZWM0IGNsaXBFbmQgPSBwcm9qZWN0aW9uTWF0cml4ICogZW5kO1xuXG5cdFx0XHRcdFx0Ly8gbmRjIHNwYWNlXG5cdFx0XHRcdFx0dmVjMyBuZGNTdGFydCA9IGNsaXBTdGFydC54eXogLyBjbGlwU3RhcnQudztcblx0XHRcdFx0XHR2ZWMzIG5kY0VuZCA9IGNsaXBFbmQueHl6IC8gY2xpcEVuZC53O1xuXG5cdFx0XHRcdFx0Ly8gZGlyZWN0aW9uXG5cdFx0XHRcdFx0dmVjMiBkaXIgPSBuZGNFbmQueHkgLSBuZGNTdGFydC54eTtcblxuXHRcdFx0XHRcdC8vIGFjY291bnQgZm9yIGNsaXAtc3BhY2UgYXNwZWN0IHJhdGlvXG5cdFx0XHRcdFx0ZGlyLnggKj0gYXNwZWN0O1xuXHRcdFx0XHRcdGRpciA9IG5vcm1hbGl6ZSggZGlyICk7XG5cblx0XHRcdFx0XHQjaWZkZWYgV09STERfVU5JVFNcblxuXHRcdFx0XHRcdFx0Ly8gZ2V0IHRoZSBvZmZzZXQgZGlyZWN0aW9uIGFzIHBlcnBlbmRpY3VsYXIgdG8gdGhlIHZpZXcgdmVjdG9yXG5cdFx0XHRcdFx0XHR2ZWMzIHdvcmxkRGlyID0gbm9ybWFsaXplKCBlbmQueHl6IC0gc3RhcnQueHl6ICk7XG5cdFx0XHRcdFx0XHR2ZWMzIG9mZnNldDtcblx0XHRcdFx0XHRcdGlmICggcG9zaXRpb24ueSA8IDAuNSApIHtcblxuXHRcdFx0XHRcdFx0XHRvZmZzZXQgPSBub3JtYWxpemUoIGNyb3NzKCBzdGFydC54eXosIHdvcmxkRGlyICkgKTtcblxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRvZmZzZXQgPSBub3JtYWxpemUoIGNyb3NzKCBlbmQueHl6LCB3b3JsZERpciApICk7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gc2lnbiBmbGlwXG5cdFx0XHRcdFx0XHRpZiAoIHBvc2l0aW9uLnggPCAwLjAgKSBvZmZzZXQgKj0gLSAxLjA7XG5cblx0XHRcdFx0XHRcdGZsb2F0IGZvcndhcmRPZmZzZXQgPSBkb3QoIHdvcmxkRGlyLCB2ZWMzKCAwLjAsIDAuMCwgMS4wICkgKTtcblxuXHRcdFx0XHRcdFx0Ly8gZG9uJ3QgZXh0ZW5kIHRoZSBsaW5lIGlmIHdlJ3JlIHJlbmRlcmluZyBkYXNoZXMgYmVjYXVzZSB3ZVxuXHRcdFx0XHRcdFx0Ly8gd29uJ3QgYmUgcmVuZGVyaW5nIHRoZSBlbmRjYXBzXG5cdFx0XHRcdFx0XHQjaWZuZGVmIFVTRV9EQVNIXG5cblx0XHRcdFx0XHRcdFx0Ly8gZXh0ZW5kIHRoZSBsaW5lIGJvdW5kcyB0byBlbmNvbXBhc3MgIGVuZGNhcHNcblx0XHRcdFx0XHRcdFx0c3RhcnQueHl6ICs9IC0gd29ybGREaXIgKiBsaW5ld2lkdGggKiAwLjU7XG5cdFx0XHRcdFx0XHRcdGVuZC54eXogKz0gd29ybGREaXIgKiBsaW5ld2lkdGggKiAwLjU7XG5cblx0XHRcdFx0XHRcdFx0Ly8gc2hpZnQgdGhlIHBvc2l0aW9uIG9mIHRoZSBxdWFkIHNvIGl0IGh1Z3MgdGhlIGZvcndhcmQgZWRnZSBvZiB0aGUgbGluZVxuXHRcdFx0XHRcdFx0XHRvZmZzZXQueHkgLT0gZGlyICogZm9yd2FyZE9mZnNldDtcblx0XHRcdFx0XHRcdFx0b2Zmc2V0LnogKz0gMC41O1xuXG5cdFx0XHRcdFx0XHQjZW5kaWZcblxuXHRcdFx0XHRcdFx0Ly8gZW5kY2Fwc1xuXHRcdFx0XHRcdFx0aWYgKCBwb3NpdGlvbi55ID4gMS4wIHx8IHBvc2l0aW9uLnkgPCAwLjAgKSB7XG5cblx0XHRcdFx0XHRcdFx0b2Zmc2V0Lnh5ICs9IGRpciAqIDIuMCAqIGZvcndhcmRPZmZzZXQ7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gYWRqdXN0IGZvciBsaW5ld2lkdGhcblx0XHRcdFx0XHRcdG9mZnNldCAqPSBsaW5ld2lkdGggKiAwLjU7XG5cblx0XHRcdFx0XHRcdC8vIHNldCB0aGUgd29ybGQgcG9zaXRpb25cblx0XHRcdFx0XHRcdHdvcmxkUG9zID0gKCBwb3NpdGlvbi55IDwgMC41ICkgPyBzdGFydCA6IGVuZDtcblx0XHRcdFx0XHRcdHdvcmxkUG9zLnh5eiArPSBvZmZzZXQ7XG5cblx0XHRcdFx0XHRcdC8vIHByb2plY3QgdGhlIHdvcmxkcG9zXG5cdFx0XHRcdFx0XHR2ZWM0IGNsaXAgPSBwcm9qZWN0aW9uTWF0cml4ICogd29ybGRQb3M7XG5cblx0XHRcdFx0XHRcdC8vIHNoaWZ0IHRoZSBkZXB0aCBvZiB0aGUgcHJvamVjdGVkIHBvaW50cyBzbyB0aGUgbGluZVxuXHRcdFx0XHRcdFx0Ly8gc2VnbWVudHMgb3ZlcmxhcCBuZWF0bHlcblx0XHRcdFx0XHRcdHZlYzMgY2xpcFBvc2UgPSAoIHBvc2l0aW9uLnkgPCAwLjUgKSA/IG5kY1N0YXJ0IDogbmRjRW5kO1xuXHRcdFx0XHRcdFx0Y2xpcC56ID0gY2xpcFBvc2UueiAqIGNsaXAudztcblxuXHRcdFx0XHRcdCNlbHNlXG5cblx0XHRcdFx0XHRcdHZlYzIgb2Zmc2V0ID0gdmVjMiggZGlyLnksIC0gZGlyLnggKTtcblx0XHRcdFx0XHRcdC8vIHVuZG8gYXNwZWN0IHJhdGlvIGFkanVzdG1lbnRcblx0XHRcdFx0XHRcdGRpci54IC89IGFzcGVjdDtcblx0XHRcdFx0XHRcdG9mZnNldC54IC89IGFzcGVjdDtcblxuXHRcdFx0XHRcdFx0Ly8gc2lnbiBmbGlwXG5cdFx0XHRcdFx0XHRpZiAoIHBvc2l0aW9uLnggPCAwLjAgKSBvZmZzZXQgKj0gLSAxLjA7XG5cblx0XHRcdFx0XHRcdC8vIGVuZGNhcHNcblx0XHRcdFx0XHRcdGlmICggcG9zaXRpb24ueSA8IDAuMCApIHtcblxuXHRcdFx0XHRcdFx0XHRvZmZzZXQgKz0gLSBkaXI7XG5cblx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIHBvc2l0aW9uLnkgPiAxLjAgKSB7XG5cblx0XHRcdFx0XHRcdFx0b2Zmc2V0ICs9IGRpcjtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBhZGp1c3QgZm9yIGxpbmV3aWR0aFxuXHRcdFx0XHRcdFx0b2Zmc2V0ICo9IGxpbmV3aWR0aDtcblxuXHRcdFx0XHRcdFx0Ly8gYWRqdXN0IGZvciBjbGlwLXNwYWNlIHRvIHNjcmVlbi1zcGFjZSBjb252ZXJzaW9uIC8vIG1heWJlIHJlc29sdXRpb24gc2hvdWxkIGJlIGJhc2VkIG9uIHZpZXdwb3J0IC4uLlxuXHRcdFx0XHRcdFx0b2Zmc2V0IC89IHJlc29sdXRpb24ueTtcblxuXHRcdFx0XHRcdFx0Ly8gc2VsZWN0IGVuZFxuXHRcdFx0XHRcdFx0dmVjNCBjbGlwID0gKCBwb3NpdGlvbi55IDwgMC41ICkgPyBjbGlwU3RhcnQgOiBjbGlwRW5kO1xuXG5cdFx0XHRcdFx0XHQvLyBiYWNrIHRvIGNsaXAgc3BhY2Vcblx0XHRcdFx0XHRcdG9mZnNldCAqPSBjbGlwLnc7XG5cblx0XHRcdFx0XHRcdGNsaXAueHkgKz0gb2Zmc2V0O1xuXG5cdFx0XHRcdFx0I2VuZGlmXG5cblx0XHRcdFx0XHRnbF9Qb3NpdGlvbiA9IGNsaXA7XG5cblx0XHRcdFx0XHR2ZWM0IG12UG9zaXRpb24gPSAoIHBvc2l0aW9uLnkgPCAwLjUgKSA/IHN0YXJ0IDogZW5kOyAvLyB0aGlzIGlzIGFuIGFwcHJveGltYXRpb25cblxuXHRcdFx0XHRcdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl92ZXJ0ZXg+XG5cdFx0XHRcdFx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc192ZXJ0ZXg+XG5cdFx0XHRcdFx0I2luY2x1ZGUgPGZvZ192ZXJ0ZXg+XG5cblx0XHRcdFx0fVxuXHRcdFx0YFxuICAgICAgKSxcbiAgICAgIGZyYWdtZW50U2hhZGVyOiAoXG4gICAgICAgIC8qIGdsc2wgKi9cbiAgICAgICAgYFxuXHRcdFx0XHR1bmlmb3JtIHZlYzMgZGlmZnVzZTtcblx0XHRcdFx0dW5pZm9ybSBmbG9hdCBvcGFjaXR5O1xuXHRcdFx0XHR1bmlmb3JtIGZsb2F0IGxpbmV3aWR0aDtcblxuXHRcdFx0XHQjaWZkZWYgVVNFX0RBU0hcblxuXHRcdFx0XHRcdHVuaWZvcm0gZmxvYXQgZGFzaE9mZnNldDtcblx0XHRcdFx0XHR1bmlmb3JtIGZsb2F0IGRhc2hTaXplO1xuXHRcdFx0XHRcdHVuaWZvcm0gZmxvYXQgZ2FwU2l6ZTtcblxuXHRcdFx0XHQjZW5kaWZcblxuXHRcdFx0XHR2YXJ5aW5nIGZsb2F0IHZMaW5lRGlzdGFuY2U7XG5cblx0XHRcdFx0I2lmZGVmIFdPUkxEX1VOSVRTXG5cblx0XHRcdFx0XHR2YXJ5aW5nIHZlYzQgd29ybGRQb3M7XG5cdFx0XHRcdFx0dmFyeWluZyB2ZWMzIHdvcmxkU3RhcnQ7XG5cdFx0XHRcdFx0dmFyeWluZyB2ZWMzIHdvcmxkRW5kO1xuXG5cdFx0XHRcdFx0I2lmZGVmIFVTRV9EQVNIXG5cblx0XHRcdFx0XHRcdHZhcnlpbmcgdmVjMiB2VXY7XG5cblx0XHRcdFx0XHQjZW5kaWZcblxuXHRcdFx0XHQjZWxzZVxuXG5cdFx0XHRcdFx0dmFyeWluZyB2ZWMyIHZVdjtcblxuXHRcdFx0XHQjZW5kaWZcblxuXHRcdFx0XHQjaW5jbHVkZSA8Y29tbW9uPlxuXHRcdFx0XHQjaW5jbHVkZSA8Zm9nX3BhcnNfZnJhZ21lbnQ+XG5cdFx0XHRcdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX2ZyYWdtZW50PlxuXHRcdFx0XHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfZnJhZ21lbnQ+XG5cblx0XHRcdFx0I2lmZGVmIFVTRV9DT0xPUlxuXHRcdFx0XHRcdCNpZmRlZiBVU0VfTElORV9DT0xPUl9BTFBIQVxuXHRcdFx0XHRcdFx0dmFyeWluZyB2ZWM0IHZMaW5lQ29sb3I7XG5cdFx0XHRcdFx0I2Vsc2Vcblx0XHRcdFx0XHRcdHZhcnlpbmcgdmVjMyB2TGluZUNvbG9yO1xuXHRcdFx0XHRcdCNlbmRpZlxuXHRcdFx0XHQjZW5kaWZcblxuXHRcdFx0XHR2ZWMyIGNsb3Nlc3RMaW5lVG9MaW5lKHZlYzMgcDEsIHZlYzMgcDIsIHZlYzMgcDMsIHZlYzMgcDQpIHtcblxuXHRcdFx0XHRcdGZsb2F0IG11YTtcblx0XHRcdFx0XHRmbG9hdCBtdWI7XG5cblx0XHRcdFx0XHR2ZWMzIHAxMyA9IHAxIC0gcDM7XG5cdFx0XHRcdFx0dmVjMyBwNDMgPSBwNCAtIHAzO1xuXG5cdFx0XHRcdFx0dmVjMyBwMjEgPSBwMiAtIHAxO1xuXG5cdFx0XHRcdFx0ZmxvYXQgZDEzNDMgPSBkb3QoIHAxMywgcDQzICk7XG5cdFx0XHRcdFx0ZmxvYXQgZDQzMjEgPSBkb3QoIHA0MywgcDIxICk7XG5cdFx0XHRcdFx0ZmxvYXQgZDEzMjEgPSBkb3QoIHAxMywgcDIxICk7XG5cdFx0XHRcdFx0ZmxvYXQgZDQzNDMgPSBkb3QoIHA0MywgcDQzICk7XG5cdFx0XHRcdFx0ZmxvYXQgZDIxMjEgPSBkb3QoIHAyMSwgcDIxICk7XG5cblx0XHRcdFx0XHRmbG9hdCBkZW5vbSA9IGQyMTIxICogZDQzNDMgLSBkNDMyMSAqIGQ0MzIxO1xuXG5cdFx0XHRcdFx0ZmxvYXQgbnVtZXIgPSBkMTM0MyAqIGQ0MzIxIC0gZDEzMjEgKiBkNDM0MztcblxuXHRcdFx0XHRcdG11YSA9IG51bWVyIC8gZGVub207XG5cdFx0XHRcdFx0bXVhID0gY2xhbXAoIG11YSwgMC4wLCAxLjAgKTtcblx0XHRcdFx0XHRtdWIgPSAoIGQxMzQzICsgZDQzMjEgKiAoIG11YSApICkgLyBkNDM0Mztcblx0XHRcdFx0XHRtdWIgPSBjbGFtcCggbXViLCAwLjAsIDEuMCApO1xuXG5cdFx0XHRcdFx0cmV0dXJuIHZlYzIoIG11YSwgbXViICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHZvaWQgbWFpbigpIHtcblxuXHRcdFx0XHRcdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfZnJhZ21lbnQ+XG5cblx0XHRcdFx0XHQjaWZkZWYgVVNFX0RBU0hcblxuXHRcdFx0XHRcdFx0aWYgKCB2VXYueSA8IC0gMS4wIHx8IHZVdi55ID4gMS4wICkgZGlzY2FyZDsgLy8gZGlzY2FyZCBlbmRjYXBzXG5cblx0XHRcdFx0XHRcdGlmICggbW9kKCB2TGluZURpc3RhbmNlICsgZGFzaE9mZnNldCwgZGFzaFNpemUgKyBnYXBTaXplICkgPiBkYXNoU2l6ZSApIGRpc2NhcmQ7IC8vIHRvZG8gLSBGSVhcblxuXHRcdFx0XHRcdCNlbmRpZlxuXG5cdFx0XHRcdFx0ZmxvYXQgYWxwaGEgPSBvcGFjaXR5O1xuXG5cdFx0XHRcdFx0I2lmZGVmIFdPUkxEX1VOSVRTXG5cblx0XHRcdFx0XHRcdC8vIEZpbmQgdGhlIGNsb3Nlc3QgcG9pbnRzIG9uIHRoZSB2aWV3IHJheSBhbmQgdGhlIGxpbmUgc2VnbWVudFxuXHRcdFx0XHRcdFx0dmVjMyByYXlFbmQgPSBub3JtYWxpemUoIHdvcmxkUG9zLnh5eiApICogMWU1O1xuXHRcdFx0XHRcdFx0dmVjMyBsaW5lRGlyID0gd29ybGRFbmQgLSB3b3JsZFN0YXJ0O1xuXHRcdFx0XHRcdFx0dmVjMiBwYXJhbXMgPSBjbG9zZXN0TGluZVRvTGluZSggd29ybGRTdGFydCwgd29ybGRFbmQsIHZlYzMoIDAuMCwgMC4wLCAwLjAgKSwgcmF5RW5kICk7XG5cblx0XHRcdFx0XHRcdHZlYzMgcDEgPSB3b3JsZFN0YXJ0ICsgbGluZURpciAqIHBhcmFtcy54O1xuXHRcdFx0XHRcdFx0dmVjMyBwMiA9IHJheUVuZCAqIHBhcmFtcy55O1xuXHRcdFx0XHRcdFx0dmVjMyBkZWx0YSA9IHAxIC0gcDI7XG5cdFx0XHRcdFx0XHRmbG9hdCBsZW4gPSBsZW5ndGgoIGRlbHRhICk7XG5cdFx0XHRcdFx0XHRmbG9hdCBub3JtID0gbGVuIC8gbGluZXdpZHRoO1xuXG5cdFx0XHRcdFx0XHQjaWZuZGVmIFVTRV9EQVNIXG5cblx0XHRcdFx0XHRcdFx0I2lmZGVmIFVTRV9BTFBIQV9UT19DT1ZFUkFHRVxuXG5cdFx0XHRcdFx0XHRcdFx0ZmxvYXQgZG5vcm0gPSBmd2lkdGgoIG5vcm0gKTtcblx0XHRcdFx0XHRcdFx0XHRhbHBoYSA9IDEuMCAtIHNtb290aHN0ZXAoIDAuNSAtIGRub3JtLCAwLjUgKyBkbm9ybSwgbm9ybSApO1xuXG5cdFx0XHRcdFx0XHRcdCNlbHNlXG5cblx0XHRcdFx0XHRcdFx0XHRpZiAoIG5vcm0gPiAwLjUgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdGRpc2NhcmQ7XG5cblx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0I2VuZGlmXG5cblx0XHRcdFx0XHRcdCNlbmRpZlxuXG5cdFx0XHRcdFx0I2Vsc2VcblxuXHRcdFx0XHRcdFx0I2lmZGVmIFVTRV9BTFBIQV9UT19DT1ZFUkFHRVxuXG5cdFx0XHRcdFx0XHRcdC8vIGFydGlmYWN0cyBhcHBlYXIgb24gc29tZSBoYXJkd2FyZSBpZiBhIGRlcml2YXRpdmUgaXMgdGFrZW4gd2l0aGluIGEgY29uZGl0aW9uYWxcblx0XHRcdFx0XHRcdFx0ZmxvYXQgYSA9IHZVdi54O1xuXHRcdFx0XHRcdFx0XHRmbG9hdCBiID0gKCB2VXYueSA+IDAuMCApID8gdlV2LnkgLSAxLjAgOiB2VXYueSArIDEuMDtcblx0XHRcdFx0XHRcdFx0ZmxvYXQgbGVuMiA9IGEgKiBhICsgYiAqIGI7XG5cdFx0XHRcdFx0XHRcdGZsb2F0IGRsZW4gPSBmd2lkdGgoIGxlbjIgKTtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIGFicyggdlV2LnkgKSA+IDEuMCApIHtcblxuXHRcdFx0XHRcdFx0XHRcdGFscGhhID0gMS4wIC0gc21vb3Roc3RlcCggMS4wIC0gZGxlbiwgMS4wICsgZGxlbiwgbGVuMiApO1xuXG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0I2Vsc2VcblxuXHRcdFx0XHRcdFx0XHRpZiAoIGFicyggdlV2LnkgKSA+IDEuMCApIHtcblxuXHRcdFx0XHRcdFx0XHRcdGZsb2F0IGEgPSB2VXYueDtcblx0XHRcdFx0XHRcdFx0XHRmbG9hdCBiID0gKCB2VXYueSA+IDAuMCApID8gdlV2LnkgLSAxLjAgOiB2VXYueSArIDEuMDtcblx0XHRcdFx0XHRcdFx0XHRmbG9hdCBsZW4yID0gYSAqIGEgKyBiICogYjtcblxuXHRcdFx0XHRcdFx0XHRcdGlmICggbGVuMiA+IDEuMCApIGRpc2NhcmQ7XG5cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQjZW5kaWZcblxuXHRcdFx0XHRcdCNlbmRpZlxuXG5cdFx0XHRcdFx0dmVjNCBkaWZmdXNlQ29sb3IgPSB2ZWM0KCBkaWZmdXNlLCBhbHBoYSApO1xuXHRcdFx0XHRcdCNpZmRlZiBVU0VfQ09MT1Jcblx0XHRcdFx0XHRcdCNpZmRlZiBVU0VfTElORV9DT0xPUl9BTFBIQVxuXHRcdFx0XHRcdFx0XHRkaWZmdXNlQ29sb3IgKj0gdkxpbmVDb2xvcjtcblx0XHRcdFx0XHRcdCNlbHNlXG5cdFx0XHRcdFx0XHRcdGRpZmZ1c2VDb2xvci5yZ2IgKj0gdkxpbmVDb2xvcjtcblx0XHRcdFx0XHRcdCNlbmRpZlxuXHRcdFx0XHRcdCNlbmRpZlxuXG5cdFx0XHRcdFx0I2luY2x1ZGUgPGxvZ2RlcHRoYnVmX2ZyYWdtZW50PlxuXG5cdFx0XHRcdFx0Z2xfRnJhZ0NvbG9yID0gZGlmZnVzZUNvbG9yO1xuXG5cdFx0XHRcdFx0I2luY2x1ZGUgPHRvbmVtYXBwaW5nX2ZyYWdtZW50PlxuXHRcdFx0XHRcdCNpbmNsdWRlIDwke3BhcnNlSW50KFJFVklTSU9OLnJlcGxhY2UoL1xcRCsvZywgXCJcIikpID49IDE1NCA/IFwiY29sb3JzcGFjZV9mcmFnbWVudFwiIDogXCJlbmNvZGluZ3NfZnJhZ21lbnRcIn0+XG5cdFx0XHRcdFx0I2luY2x1ZGUgPGZvZ19mcmFnbWVudD5cblx0XHRcdFx0XHQjaW5jbHVkZSA8cHJlbXVsdGlwbGllZF9hbHBoYV9mcmFnbWVudD5cblxuXHRcdFx0XHR9XG5cdFx0XHRgXG4gICAgICApLFxuICAgICAgY2xpcHBpbmc6IHRydWVcbiAgICAgIC8vIHJlcXVpcmVkIGZvciBjbGlwcGluZyBzdXBwb3J0XG4gICAgfSk7XG4gICAgdGhpcy5pc0xpbmVNYXRlcmlhbCA9IHRydWU7XG4gICAgdGhpcy5vbkJlZm9yZUNvbXBpbGUgPSBmdW5jdGlvbigpIHtcbiAgICAgIGlmICh0aGlzLnRyYW5zcGFyZW50KSB7XG4gICAgICAgIHRoaXMuZGVmaW5lcy5VU0VfTElORV9DT0xPUl9BTFBIQSA9IFwiMVwiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVsZXRlIHRoaXMuZGVmaW5lcy5VU0VfTElORV9DT0xPUl9BTFBIQTtcbiAgICAgIH1cbiAgICB9O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRoaXMsIHtcbiAgICAgIGNvbG9yOiB7XG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMudW5pZm9ybXMuZGlmZnVzZS52YWx1ZTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgIHRoaXMudW5pZm9ybXMuZGlmZnVzZS52YWx1ZSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgd29ybGRVbml0czoge1xuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBcIldPUkxEX1VOSVRTXCIgaW4gdGhpcy5kZWZpbmVzO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgaWYgKHZhbHVlID09PSB0cnVlKSB7XG4gICAgICAgICAgICB0aGlzLmRlZmluZXMuV09STERfVU5JVFMgPSBcIlwiO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5kZWZpbmVzLldPUkxEX1VOSVRTO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGxpbmV3aWR0aDoge1xuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLnVuaWZvcm1zLmxpbmV3aWR0aC52YWx1ZTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgIHRoaXMudW5pZm9ybXMubGluZXdpZHRoLnZhbHVlID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBkYXNoZWQ6IHtcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gQm9vbGVhbihcIlVTRV9EQVNIXCIgaW4gdGhpcy5kZWZpbmVzKTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0KHZhbHVlKSB7XG4gICAgICAgICAgaWYgKEJvb2xlYW4odmFsdWUpICE9PSBCb29sZWFuKFwiVVNFX0RBU0hcIiBpbiB0aGlzLmRlZmluZXMpKSB7XG4gICAgICAgICAgICB0aGlzLm5lZWRzVXBkYXRlID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHZhbHVlID09PSB0cnVlKSB7XG4gICAgICAgICAgICB0aGlzLmRlZmluZXMuVVNFX0RBU0ggPSBcIlwiO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5kZWZpbmVzLlVTRV9EQVNIO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGRhc2hTY2FsZToge1xuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLnVuaWZvcm1zLmRhc2hTY2FsZS52YWx1ZTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgIHRoaXMudW5pZm9ybXMuZGFzaFNjYWxlLnZhbHVlID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBkYXNoU2l6ZToge1xuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLnVuaWZvcm1zLmRhc2hTaXplLnZhbHVlO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgdGhpcy51bmlmb3Jtcy5kYXNoU2l6ZS52YWx1ZSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgZGFzaE9mZnNldDoge1xuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLnVuaWZvcm1zLmRhc2hPZmZzZXQudmFsdWU7XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICB0aGlzLnVuaWZvcm1zLmRhc2hPZmZzZXQudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGdhcFNpemU6IHtcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy51bmlmb3Jtcy5nYXBTaXplLnZhbHVlO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgdGhpcy51bmlmb3Jtcy5nYXBTaXplLnZhbHVlID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBvcGFjaXR5OiB7XG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMudW5pZm9ybXMub3BhY2l0eS52YWx1ZTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgIHRoaXMudW5pZm9ybXMub3BhY2l0eS52YWx1ZSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgcmVzb2x1dGlvbjoge1xuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLnVuaWZvcm1zLnJlc29sdXRpb24udmFsdWU7XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICB0aGlzLnVuaWZvcm1zLnJlc29sdXRpb24udmFsdWUuY29weSh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBhbHBoYVRvQ292ZXJhZ2U6IHtcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gQm9vbGVhbihcIlVTRV9BTFBIQV9UT19DT1ZFUkFHRVwiIGluIHRoaXMuZGVmaW5lcyk7XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICBpZiAoQm9vbGVhbih2YWx1ZSkgIT09IEJvb2xlYW4oXCJVU0VfQUxQSEFfVE9fQ09WRVJBR0VcIiBpbiB0aGlzLmRlZmluZXMpKSB7XG4gICAgICAgICAgICB0aGlzLm5lZWRzVXBkYXRlID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHZhbHVlID09PSB0cnVlKSB7XG4gICAgICAgICAgICB0aGlzLmRlZmluZXMuVVNFX0FMUEhBX1RPX0NPVkVSQUdFID0gXCJcIjtcbiAgICAgICAgICAgIHRoaXMuZXh0ZW5zaW9ucy5kZXJpdmF0aXZlcyA9IHRydWU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmRlZmluZXMuVVNFX0FMUEhBX1RPX0NPVkVSQUdFO1xuICAgICAgICAgICAgdGhpcy5leHRlbnNpb25zLmRlcml2YXRpdmVzID0gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgdGhpcy5zZXRWYWx1ZXMocGFyYW1ldGVycyk7XG4gIH1cbn1cbmV4cG9ydCB7XG4gIExpbmVNYXRlcmlhbFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUxpbmVNYXRlcmlhbC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/three-stdlib/lines/LineMaterial.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/three-stdlib/lines/LineSegments2.js":
/*!**********************************************************!*\
  !*** ./node_modules/three-stdlib/lines/LineSegments2.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LineSegments2: () => (/* binding */ LineSegments2)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\n/* harmony import */ var _LineSegmentsGeometry_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./LineSegmentsGeometry.js */ \"(ssr)/./node_modules/three-stdlib/lines/LineSegmentsGeometry.js\");\n/* harmony import */ var _LineMaterial_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./LineMaterial.js */ \"(ssr)/./node_modules/three-stdlib/lines/LineMaterial.js\");\n\n\n\nconst _start = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\nconst _end = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\nconst _start4 = new three__WEBPACK_IMPORTED_MODULE_0__.Vector4();\nconst _end4 = new three__WEBPACK_IMPORTED_MODULE_0__.Vector4();\nconst _ssOrigin = new three__WEBPACK_IMPORTED_MODULE_0__.Vector4();\nconst _ssOrigin3 = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\nconst _mvMatrix = new three__WEBPACK_IMPORTED_MODULE_0__.Matrix4();\nconst _line = new three__WEBPACK_IMPORTED_MODULE_0__.Line3();\nconst _closestPoint = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\nconst _box = new three__WEBPACK_IMPORTED_MODULE_0__.Box3();\nconst _sphere = new three__WEBPACK_IMPORTED_MODULE_0__.Sphere();\nconst _clipToWorldVector = new three__WEBPACK_IMPORTED_MODULE_0__.Vector4();\nlet _ray, _instanceStart, _instanceEnd, _lineWidth;\nfunction getWorldSpaceHalfWidth(camera, distance, resolution) {\n  _clipToWorldVector.set(0, 0, -distance, 1).applyMatrix4(camera.projectionMatrix);\n  _clipToWorldVector.multiplyScalar(1 / _clipToWorldVector.w);\n  _clipToWorldVector.x = _lineWidth / resolution.width;\n  _clipToWorldVector.y = _lineWidth / resolution.height;\n  _clipToWorldVector.applyMatrix4(camera.projectionMatrixInverse);\n  _clipToWorldVector.multiplyScalar(1 / _clipToWorldVector.w);\n  return Math.abs(Math.max(_clipToWorldVector.x, _clipToWorldVector.y));\n}\nfunction raycastWorldUnits(lineSegments, intersects) {\n  for (let i = 0, l = _instanceStart.count; i < l; i++) {\n    _line.start.fromBufferAttribute(_instanceStart, i);\n    _line.end.fromBufferAttribute(_instanceEnd, i);\n    const pointOnLine = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n    const point = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n    _ray.distanceSqToSegment(_line.start, _line.end, point, pointOnLine);\n    const isInside = point.distanceTo(pointOnLine) < _lineWidth * 0.5;\n    if (isInside) {\n      intersects.push({\n        point,\n        pointOnLine,\n        distance: _ray.origin.distanceTo(point),\n        object: lineSegments,\n        face: null,\n        faceIndex: i,\n        uv: null,\n        uv2: null\n      });\n    }\n  }\n}\nfunction raycastScreenSpace(lineSegments, camera, intersects) {\n  const projectionMatrix = camera.projectionMatrix;\n  const material = lineSegments.material;\n  const resolution = material.resolution;\n  const matrixWorld = lineSegments.matrixWorld;\n  const geometry = lineSegments.geometry;\n  const instanceStart = geometry.attributes.instanceStart;\n  const instanceEnd = geometry.attributes.instanceEnd;\n  const near = -camera.near;\n  _ray.at(1, _ssOrigin);\n  _ssOrigin.w = 1;\n  _ssOrigin.applyMatrix4(camera.matrixWorldInverse);\n  _ssOrigin.applyMatrix4(projectionMatrix);\n  _ssOrigin.multiplyScalar(1 / _ssOrigin.w);\n  _ssOrigin.x *= resolution.x / 2;\n  _ssOrigin.y *= resolution.y / 2;\n  _ssOrigin.z = 0;\n  _ssOrigin3.copy(_ssOrigin);\n  _mvMatrix.multiplyMatrices(camera.matrixWorldInverse, matrixWorld);\n  for (let i = 0, l = instanceStart.count; i < l; i++) {\n    _start4.fromBufferAttribute(instanceStart, i);\n    _end4.fromBufferAttribute(instanceEnd, i);\n    _start4.w = 1;\n    _end4.w = 1;\n    _start4.applyMatrix4(_mvMatrix);\n    _end4.applyMatrix4(_mvMatrix);\n    const isBehindCameraNear = _start4.z > near && _end4.z > near;\n    if (isBehindCameraNear) {\n      continue;\n    }\n    if (_start4.z > near) {\n      const deltaDist = _start4.z - _end4.z;\n      const t = (_start4.z - near) / deltaDist;\n      _start4.lerp(_end4, t);\n    } else if (_end4.z > near) {\n      const deltaDist = _end4.z - _start4.z;\n      const t = (_end4.z - near) / deltaDist;\n      _end4.lerp(_start4, t);\n    }\n    _start4.applyMatrix4(projectionMatrix);\n    _end4.applyMatrix4(projectionMatrix);\n    _start4.multiplyScalar(1 / _start4.w);\n    _end4.multiplyScalar(1 / _end4.w);\n    _start4.x *= resolution.x / 2;\n    _start4.y *= resolution.y / 2;\n    _end4.x *= resolution.x / 2;\n    _end4.y *= resolution.y / 2;\n    _line.start.copy(_start4);\n    _line.start.z = 0;\n    _line.end.copy(_end4);\n    _line.end.z = 0;\n    const param = _line.closestPointToPointParameter(_ssOrigin3, true);\n    _line.at(param, _closestPoint);\n    const zPos = three__WEBPACK_IMPORTED_MODULE_0__.MathUtils.lerp(_start4.z, _end4.z, param);\n    const isInClipSpace = zPos >= -1 && zPos <= 1;\n    const isInside = _ssOrigin3.distanceTo(_closestPoint) < _lineWidth * 0.5;\n    if (isInClipSpace && isInside) {\n      _line.start.fromBufferAttribute(instanceStart, i);\n      _line.end.fromBufferAttribute(instanceEnd, i);\n      _line.start.applyMatrix4(matrixWorld);\n      _line.end.applyMatrix4(matrixWorld);\n      const pointOnLine = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n      const point = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n      _ray.distanceSqToSegment(_line.start, _line.end, point, pointOnLine);\n      intersects.push({\n        point,\n        pointOnLine,\n        distance: _ray.origin.distanceTo(point),\n        object: lineSegments,\n        face: null,\n        faceIndex: i,\n        uv: null,\n        uv2: null\n      });\n    }\n  }\n}\nclass LineSegments2 extends three__WEBPACK_IMPORTED_MODULE_0__.Mesh {\n  constructor(geometry = new _LineSegmentsGeometry_js__WEBPACK_IMPORTED_MODULE_1__.LineSegmentsGeometry(), material = new _LineMaterial_js__WEBPACK_IMPORTED_MODULE_2__.LineMaterial({ color: Math.random() * 16777215 })) {\n    super(geometry, material);\n    this.isLineSegments2 = true;\n    this.type = \"LineSegments2\";\n  }\n  // for backwards-compatibility, but could be a method of LineSegmentsGeometry...\n  computeLineDistances() {\n    const geometry = this.geometry;\n    const instanceStart = geometry.attributes.instanceStart;\n    const instanceEnd = geometry.attributes.instanceEnd;\n    const lineDistances = new Float32Array(2 * instanceStart.count);\n    for (let i = 0, j = 0, l = instanceStart.count; i < l; i++, j += 2) {\n      _start.fromBufferAttribute(instanceStart, i);\n      _end.fromBufferAttribute(instanceEnd, i);\n      lineDistances[j] = j === 0 ? 0 : lineDistances[j - 1];\n      lineDistances[j + 1] = lineDistances[j] + _start.distanceTo(_end);\n    }\n    const instanceDistanceBuffer = new three__WEBPACK_IMPORTED_MODULE_0__.InstancedInterleavedBuffer(lineDistances, 2, 1);\n    geometry.setAttribute(\"instanceDistanceStart\", new three__WEBPACK_IMPORTED_MODULE_0__.InterleavedBufferAttribute(instanceDistanceBuffer, 1, 0));\n    geometry.setAttribute(\"instanceDistanceEnd\", new three__WEBPACK_IMPORTED_MODULE_0__.InterleavedBufferAttribute(instanceDistanceBuffer, 1, 1));\n    return this;\n  }\n  raycast(raycaster, intersects) {\n    const worldUnits = this.material.worldUnits;\n    const camera = raycaster.camera;\n    if (camera === null && !worldUnits) {\n      console.error(\n        'LineSegments2: \"Raycaster.camera\" needs to be set in order to raycast against LineSegments2 while worldUnits is set to false.'\n      );\n    }\n    const threshold = raycaster.params.Line2 !== void 0 ? raycaster.params.Line2.threshold || 0 : 0;\n    _ray = raycaster.ray;\n    const matrixWorld = this.matrixWorld;\n    const geometry = this.geometry;\n    const material = this.material;\n    _lineWidth = material.linewidth + threshold;\n    _instanceStart = geometry.attributes.instanceStart;\n    _instanceEnd = geometry.attributes.instanceEnd;\n    if (geometry.boundingSphere === null) {\n      geometry.computeBoundingSphere();\n    }\n    _sphere.copy(geometry.boundingSphere).applyMatrix4(matrixWorld);\n    let sphereMargin;\n    if (worldUnits) {\n      sphereMargin = _lineWidth * 0.5;\n    } else {\n      const distanceToSphere = Math.max(camera.near, _sphere.distanceToPoint(_ray.origin));\n      sphereMargin = getWorldSpaceHalfWidth(camera, distanceToSphere, material.resolution);\n    }\n    _sphere.radius += sphereMargin;\n    if (_ray.intersectsSphere(_sphere) === false) {\n      return;\n    }\n    if (geometry.boundingBox === null) {\n      geometry.computeBoundingBox();\n    }\n    _box.copy(geometry.boundingBox).applyMatrix4(matrixWorld);\n    let boxMargin;\n    if (worldUnits) {\n      boxMargin = _lineWidth * 0.5;\n    } else {\n      const distanceToBox = Math.max(camera.near, _box.distanceToPoint(_ray.origin));\n      boxMargin = getWorldSpaceHalfWidth(camera, distanceToBox, material.resolution);\n    }\n    _box.expandByScalar(boxMargin);\n    if (_ray.intersectsBox(_box) === false) {\n      return;\n    }\n    if (worldUnits) {\n      raycastWorldUnits(this, intersects);\n    } else {\n      raycastScreenSpace(this, camera, intersects);\n    }\n  }\n}\n\n//# sourceMappingURL=LineSegments2.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/three-stdlib/lines/LineSegments2.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/three-stdlib/lines/LineSegmentsGeometry.js":
/*!*****************************************************************!*\
  !*** ./node_modules/three-stdlib/lines/LineSegmentsGeometry.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LineSegmentsGeometry: () => (/* binding */ LineSegmentsGeometry)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\n\nconst _box = new three__WEBPACK_IMPORTED_MODULE_0__.Box3();\nconst _vector = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\nclass LineSegmentsGeometry extends three__WEBPACK_IMPORTED_MODULE_0__.InstancedBufferGeometry {\n  constructor() {\n    super();\n    this.isLineSegmentsGeometry = true;\n    this.type = \"LineSegmentsGeometry\";\n    const positions = [-1, 2, 0, 1, 2, 0, -1, 1, 0, 1, 1, 0, -1, 0, 0, 1, 0, 0, -1, -1, 0, 1, -1, 0];\n    const uvs = [-1, 2, 1, 2, -1, 1, 1, 1, -1, -1, 1, -1, -1, -2, 1, -2];\n    const index = [0, 2, 1, 2, 3, 1, 2, 4, 3, 4, 5, 3, 4, 6, 5, 6, 7, 5];\n    this.setIndex(index);\n    this.setAttribute(\"position\", new three__WEBPACK_IMPORTED_MODULE_0__.Float32BufferAttribute(positions, 3));\n    this.setAttribute(\"uv\", new three__WEBPACK_IMPORTED_MODULE_0__.Float32BufferAttribute(uvs, 2));\n  }\n  applyMatrix4(matrix) {\n    const start = this.attributes.instanceStart;\n    const end = this.attributes.instanceEnd;\n    if (start !== void 0) {\n      start.applyMatrix4(matrix);\n      end.applyMatrix4(matrix);\n      start.needsUpdate = true;\n    }\n    if (this.boundingBox !== null) {\n      this.computeBoundingBox();\n    }\n    if (this.boundingSphere !== null) {\n      this.computeBoundingSphere();\n    }\n    return this;\n  }\n  setPositions(array) {\n    let lineSegments;\n    if (array instanceof Float32Array) {\n      lineSegments = array;\n    } else if (Array.isArray(array)) {\n      lineSegments = new Float32Array(array);\n    }\n    const instanceBuffer = new three__WEBPACK_IMPORTED_MODULE_0__.InstancedInterleavedBuffer(lineSegments, 6, 1);\n    this.setAttribute(\"instanceStart\", new three__WEBPACK_IMPORTED_MODULE_0__.InterleavedBufferAttribute(instanceBuffer, 3, 0));\n    this.setAttribute(\"instanceEnd\", new three__WEBPACK_IMPORTED_MODULE_0__.InterleavedBufferAttribute(instanceBuffer, 3, 3));\n    this.computeBoundingBox();\n    this.computeBoundingSphere();\n    return this;\n  }\n  setColors(array, itemSize = 3) {\n    let colors;\n    if (array instanceof Float32Array) {\n      colors = array;\n    } else if (Array.isArray(array)) {\n      colors = new Float32Array(array);\n    }\n    const instanceColorBuffer = new three__WEBPACK_IMPORTED_MODULE_0__.InstancedInterleavedBuffer(colors, itemSize * 2, 1);\n    this.setAttribute(\"instanceColorStart\", new three__WEBPACK_IMPORTED_MODULE_0__.InterleavedBufferAttribute(instanceColorBuffer, itemSize, 0));\n    this.setAttribute(\"instanceColorEnd\", new three__WEBPACK_IMPORTED_MODULE_0__.InterleavedBufferAttribute(instanceColorBuffer, itemSize, itemSize));\n    return this;\n  }\n  fromWireframeGeometry(geometry) {\n    this.setPositions(geometry.attributes.position.array);\n    return this;\n  }\n  fromEdgesGeometry(geometry) {\n    this.setPositions(geometry.attributes.position.array);\n    return this;\n  }\n  fromMesh(mesh) {\n    this.fromWireframeGeometry(new three__WEBPACK_IMPORTED_MODULE_0__.WireframeGeometry(mesh.geometry));\n    return this;\n  }\n  fromLineSegments(lineSegments) {\n    const geometry = lineSegments.geometry;\n    this.setPositions(geometry.attributes.position.array);\n    return this;\n  }\n  computeBoundingBox() {\n    if (this.boundingBox === null) {\n      this.boundingBox = new three__WEBPACK_IMPORTED_MODULE_0__.Box3();\n    }\n    const start = this.attributes.instanceStart;\n    const end = this.attributes.instanceEnd;\n    if (start !== void 0 && end !== void 0) {\n      this.boundingBox.setFromBufferAttribute(start);\n      _box.setFromBufferAttribute(end);\n      this.boundingBox.union(_box);\n    }\n  }\n  computeBoundingSphere() {\n    if (this.boundingSphere === null) {\n      this.boundingSphere = new three__WEBPACK_IMPORTED_MODULE_0__.Sphere();\n    }\n    if (this.boundingBox === null) {\n      this.computeBoundingBox();\n    }\n    const start = this.attributes.instanceStart;\n    const end = this.attributes.instanceEnd;\n    if (start !== void 0 && end !== void 0) {\n      const center = this.boundingSphere.center;\n      this.boundingBox.getCenter(center);\n      let maxRadiusSq = 0;\n      for (let i = 0, il = start.count; i < il; i++) {\n        _vector.fromBufferAttribute(start, i);\n        maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector));\n        _vector.fromBufferAttribute(end, i);\n        maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector));\n      }\n      this.boundingSphere.radius = Math.sqrt(maxRadiusSq);\n      if (isNaN(this.boundingSphere.radius)) {\n        console.error(\n          \"THREE.LineSegmentsGeometry.computeBoundingSphere(): Computed radius is NaN. The instanced position data is likely to have NaN values.\",\n          this\n        );\n      }\n    }\n  }\n  toJSON() {\n  }\n  applyMatrix(matrix) {\n    console.warn(\"THREE.LineSegmentsGeometry: applyMatrix() has been renamed to applyMatrix4().\");\n    return this.applyMatrix4(matrix);\n  }\n}\n\n//# sourceMappingURL=LineSegmentsGeometry.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdGhyZWUtc3RkbGliL2xpbmVzL0xpbmVTZWdtZW50c0dlb21ldHJ5LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQTBLO0FBQzFLLGlCQUFpQix1Q0FBSTtBQUNyQixvQkFBb0IsMENBQU87QUFDM0IsbUNBQW1DLDBEQUF1QjtBQUMxRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDLHlEQUFzQjtBQUM1RCxnQ0FBZ0MseURBQXNCO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsK0JBQStCLDZEQUEwQjtBQUN6RCwyQ0FBMkMsNkRBQTBCO0FBQ3JFLHlDQUF5Qyw2REFBMEI7QUFDbkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0Esb0NBQW9DLDZEQUEwQjtBQUM5RCxnREFBZ0QsNkRBQTBCO0FBQzFFLDhDQUE4Qyw2REFBMEI7QUFDeEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQyxvREFBaUI7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLHVDQUFJO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0MseUNBQU07QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3Q0FBd0MsUUFBUTtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHRTtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktbWF6ZS1hcHAvLi9ub2RlX21vZHVsZXMvdGhyZWUtc3RkbGliL2xpbmVzL0xpbmVTZWdtZW50c0dlb21ldHJ5LmpzPzQ5MzAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQm94MywgVmVjdG9yMywgSW5zdGFuY2VkQnVmZmVyR2VvbWV0cnksIEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUsIEluc3RhbmNlZEludGVybGVhdmVkQnVmZmVyLCBJbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZSwgV2lyZWZyYW1lR2VvbWV0cnksIFNwaGVyZSB9IGZyb20gXCJ0aHJlZVwiO1xuY29uc3QgX2JveCA9IG5ldyBCb3gzKCk7XG5jb25zdCBfdmVjdG9yID0gbmV3IFZlY3RvcjMoKTtcbmNsYXNzIExpbmVTZWdtZW50c0dlb21ldHJ5IGV4dGVuZHMgSW5zdGFuY2VkQnVmZmVyR2VvbWV0cnkge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuaXNMaW5lU2VnbWVudHNHZW9tZXRyeSA9IHRydWU7XG4gICAgdGhpcy50eXBlID0gXCJMaW5lU2VnbWVudHNHZW9tZXRyeVwiO1xuICAgIGNvbnN0IHBvc2l0aW9ucyA9IFstMSwgMiwgMCwgMSwgMiwgMCwgLTEsIDEsIDAsIDEsIDEsIDAsIC0xLCAwLCAwLCAxLCAwLCAwLCAtMSwgLTEsIDAsIDEsIC0xLCAwXTtcbiAgICBjb25zdCB1dnMgPSBbLTEsIDIsIDEsIDIsIC0xLCAxLCAxLCAxLCAtMSwgLTEsIDEsIC0xLCAtMSwgLTIsIDEsIC0yXTtcbiAgICBjb25zdCBpbmRleCA9IFswLCAyLCAxLCAyLCAzLCAxLCAyLCA0LCAzLCA0LCA1LCAzLCA0LCA2LCA1LCA2LCA3LCA1XTtcbiAgICB0aGlzLnNldEluZGV4KGluZGV4KTtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZShcInBvc2l0aW9uXCIsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKHBvc2l0aW9ucywgMykpO1xuICAgIHRoaXMuc2V0QXR0cmlidXRlKFwidXZcIiwgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUodXZzLCAyKSk7XG4gIH1cbiAgYXBwbHlNYXRyaXg0KG1hdHJpeCkge1xuICAgIGNvbnN0IHN0YXJ0ID0gdGhpcy5hdHRyaWJ1dGVzLmluc3RhbmNlU3RhcnQ7XG4gICAgY29uc3QgZW5kID0gdGhpcy5hdHRyaWJ1dGVzLmluc3RhbmNlRW5kO1xuICAgIGlmIChzdGFydCAhPT0gdm9pZCAwKSB7XG4gICAgICBzdGFydC5hcHBseU1hdHJpeDQobWF0cml4KTtcbiAgICAgIGVuZC5hcHBseU1hdHJpeDQobWF0cml4KTtcbiAgICAgIHN0YXJ0Lm5lZWRzVXBkYXRlID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKHRoaXMuYm91bmRpbmdCb3ggIT09IG51bGwpIHtcbiAgICAgIHRoaXMuY29tcHV0ZUJvdW5kaW5nQm94KCk7XG4gICAgfVxuICAgIGlmICh0aGlzLmJvdW5kaW5nU3BoZXJlICE9PSBudWxsKSB7XG4gICAgICB0aGlzLmNvbXB1dGVCb3VuZGluZ1NwaGVyZSgpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBzZXRQb3NpdGlvbnMoYXJyYXkpIHtcbiAgICBsZXQgbGluZVNlZ21lbnRzO1xuICAgIGlmIChhcnJheSBpbnN0YW5jZW9mIEZsb2F0MzJBcnJheSkge1xuICAgICAgbGluZVNlZ21lbnRzID0gYXJyYXk7XG4gICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGFycmF5KSkge1xuICAgICAgbGluZVNlZ21lbnRzID0gbmV3IEZsb2F0MzJBcnJheShhcnJheSk7XG4gICAgfVxuICAgIGNvbnN0IGluc3RhbmNlQnVmZmVyID0gbmV3IEluc3RhbmNlZEludGVybGVhdmVkQnVmZmVyKGxpbmVTZWdtZW50cywgNiwgMSk7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGUoXCJpbnN0YW5jZVN0YXJ0XCIsIG5ldyBJbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZShpbnN0YW5jZUJ1ZmZlciwgMywgMCkpO1xuICAgIHRoaXMuc2V0QXR0cmlidXRlKFwiaW5zdGFuY2VFbmRcIiwgbmV3IEludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlKGluc3RhbmNlQnVmZmVyLCAzLCAzKSk7XG4gICAgdGhpcy5jb21wdXRlQm91bmRpbmdCb3goKTtcbiAgICB0aGlzLmNvbXB1dGVCb3VuZGluZ1NwaGVyZSgpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIHNldENvbG9ycyhhcnJheSwgaXRlbVNpemUgPSAzKSB7XG4gICAgbGV0IGNvbG9ycztcbiAgICBpZiAoYXJyYXkgaW5zdGFuY2VvZiBGbG9hdDMyQXJyYXkpIHtcbiAgICAgIGNvbG9ycyA9IGFycmF5O1xuICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShhcnJheSkpIHtcbiAgICAgIGNvbG9ycyA9IG5ldyBGbG9hdDMyQXJyYXkoYXJyYXkpO1xuICAgIH1cbiAgICBjb25zdCBpbnN0YW5jZUNvbG9yQnVmZmVyID0gbmV3IEluc3RhbmNlZEludGVybGVhdmVkQnVmZmVyKGNvbG9ycywgaXRlbVNpemUgKiAyLCAxKTtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZShcImluc3RhbmNlQ29sb3JTdGFydFwiLCBuZXcgSW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGUoaW5zdGFuY2VDb2xvckJ1ZmZlciwgaXRlbVNpemUsIDApKTtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZShcImluc3RhbmNlQ29sb3JFbmRcIiwgbmV3IEludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlKGluc3RhbmNlQ29sb3JCdWZmZXIsIGl0ZW1TaXplLCBpdGVtU2l6ZSkpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIGZyb21XaXJlZnJhbWVHZW9tZXRyeShnZW9tZXRyeSkge1xuICAgIHRoaXMuc2V0UG9zaXRpb25zKGdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb24uYXJyYXkpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIGZyb21FZGdlc0dlb21ldHJ5KGdlb21ldHJ5KSB7XG4gICAgdGhpcy5zZXRQb3NpdGlvbnMoZ2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbi5hcnJheSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgZnJvbU1lc2gobWVzaCkge1xuICAgIHRoaXMuZnJvbVdpcmVmcmFtZUdlb21ldHJ5KG5ldyBXaXJlZnJhbWVHZW9tZXRyeShtZXNoLmdlb21ldHJ5KSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgZnJvbUxpbmVTZWdtZW50cyhsaW5lU2VnbWVudHMpIHtcbiAgICBjb25zdCBnZW9tZXRyeSA9IGxpbmVTZWdtZW50cy5nZW9tZXRyeTtcbiAgICB0aGlzLnNldFBvc2l0aW9ucyhnZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uLmFycmF5KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBjb21wdXRlQm91bmRpbmdCb3goKSB7XG4gICAgaWYgKHRoaXMuYm91bmRpbmdCb3ggPT09IG51bGwpIHtcbiAgICAgIHRoaXMuYm91bmRpbmdCb3ggPSBuZXcgQm94MygpO1xuICAgIH1cbiAgICBjb25zdCBzdGFydCA9IHRoaXMuYXR0cmlidXRlcy5pbnN0YW5jZVN0YXJ0O1xuICAgIGNvbnN0IGVuZCA9IHRoaXMuYXR0cmlidXRlcy5pbnN0YW5jZUVuZDtcbiAgICBpZiAoc3RhcnQgIT09IHZvaWQgMCAmJiBlbmQgIT09IHZvaWQgMCkge1xuICAgICAgdGhpcy5ib3VuZGluZ0JveC5zZXRGcm9tQnVmZmVyQXR0cmlidXRlKHN0YXJ0KTtcbiAgICAgIF9ib3guc2V0RnJvbUJ1ZmZlckF0dHJpYnV0ZShlbmQpO1xuICAgICAgdGhpcy5ib3VuZGluZ0JveC51bmlvbihfYm94KTtcbiAgICB9XG4gIH1cbiAgY29tcHV0ZUJvdW5kaW5nU3BoZXJlKCkge1xuICAgIGlmICh0aGlzLmJvdW5kaW5nU3BoZXJlID09PSBudWxsKSB7XG4gICAgICB0aGlzLmJvdW5kaW5nU3BoZXJlID0gbmV3IFNwaGVyZSgpO1xuICAgIH1cbiAgICBpZiAodGhpcy5ib3VuZGluZ0JveCA9PT0gbnVsbCkge1xuICAgICAgdGhpcy5jb21wdXRlQm91bmRpbmdCb3goKTtcbiAgICB9XG4gICAgY29uc3Qgc3RhcnQgPSB0aGlzLmF0dHJpYnV0ZXMuaW5zdGFuY2VTdGFydDtcbiAgICBjb25zdCBlbmQgPSB0aGlzLmF0dHJpYnV0ZXMuaW5zdGFuY2VFbmQ7XG4gICAgaWYgKHN0YXJ0ICE9PSB2b2lkIDAgJiYgZW5kICE9PSB2b2lkIDApIHtcbiAgICAgIGNvbnN0IGNlbnRlciA9IHRoaXMuYm91bmRpbmdTcGhlcmUuY2VudGVyO1xuICAgICAgdGhpcy5ib3VuZGluZ0JveC5nZXRDZW50ZXIoY2VudGVyKTtcbiAgICAgIGxldCBtYXhSYWRpdXNTcSA9IDA7XG4gICAgICBmb3IgKGxldCBpID0gMCwgaWwgPSBzdGFydC5jb3VudDsgaSA8IGlsOyBpKyspIHtcbiAgICAgICAgX3ZlY3Rvci5mcm9tQnVmZmVyQXR0cmlidXRlKHN0YXJ0LCBpKTtcbiAgICAgICAgbWF4UmFkaXVzU3EgPSBNYXRoLm1heChtYXhSYWRpdXNTcSwgY2VudGVyLmRpc3RhbmNlVG9TcXVhcmVkKF92ZWN0b3IpKTtcbiAgICAgICAgX3ZlY3Rvci5mcm9tQnVmZmVyQXR0cmlidXRlKGVuZCwgaSk7XG4gICAgICAgIG1heFJhZGl1c1NxID0gTWF0aC5tYXgobWF4UmFkaXVzU3EsIGNlbnRlci5kaXN0YW5jZVRvU3F1YXJlZChfdmVjdG9yKSk7XG4gICAgICB9XG4gICAgICB0aGlzLmJvdW5kaW5nU3BoZXJlLnJhZGl1cyA9IE1hdGguc3FydChtYXhSYWRpdXNTcSk7XG4gICAgICBpZiAoaXNOYU4odGhpcy5ib3VuZGluZ1NwaGVyZS5yYWRpdXMpKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgXCJUSFJFRS5MaW5lU2VnbWVudHNHZW9tZXRyeS5jb21wdXRlQm91bmRpbmdTcGhlcmUoKTogQ29tcHV0ZWQgcmFkaXVzIGlzIE5hTi4gVGhlIGluc3RhbmNlZCBwb3NpdGlvbiBkYXRhIGlzIGxpa2VseSB0byBoYXZlIE5hTiB2YWx1ZXMuXCIsXG4gICAgICAgICAgdGhpc1xuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICB0b0pTT04oKSB7XG4gIH1cbiAgYXBwbHlNYXRyaXgobWF0cml4KSB7XG4gICAgY29uc29sZS53YXJuKFwiVEhSRUUuTGluZVNlZ21lbnRzR2VvbWV0cnk6IGFwcGx5TWF0cml4KCkgaGFzIGJlZW4gcmVuYW1lZCB0byBhcHBseU1hdHJpeDQoKS5cIik7XG4gICAgcmV0dXJuIHRoaXMuYXBwbHlNYXRyaXg0KG1hdHJpeCk7XG4gIH1cbn1cbmV4cG9ydCB7XG4gIExpbmVTZWdtZW50c0dlb21ldHJ5XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9TGluZVNlZ21lbnRzR2VvbWV0cnkuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/three-stdlib/lines/LineSegmentsGeometry.js\n");

/***/ })

};
;